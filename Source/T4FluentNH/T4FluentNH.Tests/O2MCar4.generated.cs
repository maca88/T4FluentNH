//----------------------
// <auto-generated>
//    Generated by T4FluentNH.
// </auto-generated>
//----------------------
// ReSharper disable All
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.CodeDom.Compiler;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using FluentNHibernate.Automapping;
using FluentNHibernate.Mapping;
using T4FluentNH.Metadata;
using NHibernate;
using NHibernate.Collection;
using NHibernate.Util;
using System.Threading.Tasks;
//<EntityProjectItem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><EntityFullName>T4FluentNH.Tests.OneToMany.O2MCar4</EntityFullName><EntityFilePaths><string>OneToMany\O2MPerson4.cs</string></EntityFilePaths><OverrideFilePaths><string>OneToMany\O2MPerson4.cs</string></OverrideFilePaths><GeneratedFilePath>O2MCar4.generated.cs</GeneratedFilePath></EntityProjectItem>
namespace T4FluentNH.Tests.OneToMany
{
    [GeneratedCode("T4Template", "1.0")]
    public partial class O2MCar4
    {

        #region RelationsMetadata
        #pragma warning disable

        public new static readonly Dictionary<string, RelationMetadata> RelationsMetadata =
            new Dictionary<string, RelationMetadata>
            {
                {"Owner", new ManyToOneRelationMetadata
                {
                    RelatedModelType = typeof(O2MPerson4),
                    RelatedModelProperty = typeof(O2MPerson4).GetProperty("Cars"),
                    RelatedModelIdProperty = typeof(O2MPerson4).GetProperty("Id"),
                    AssociationType = AssociationType.Bidirectional,
                    Field = typeof(O2MCar4).GetField("_owner", BindingFlags.Instance | BindingFlags.NonPublic),
                    ParameterName = "owner",
                    Property = typeof(O2MCar4).GetProperty("Owner"),
                    SetMethod = typeof(O2MCar4).GetMethods().FirstOrDefault(o => o.Name == "SetOwner" && o.GetParameters().Length == 1 && o.GetParameters()[0].ParameterType == typeof(O2MPerson4)),
                    UnsetMethod = typeof(O2MCar4).GetMethods().FirstOrDefault(o => o.Name == "UnsetOwner" && o.GetParameters().Length == 0),
                    SyntheticProperty = typeof(O2MCar4).GetProperty("OwnerId"),
                    SyntheticField = typeof(O2MCar4).GetField("_ownerId", BindingFlags.Instance | BindingFlags.NonPublic),
                    SyntheticPropertyMaxLength = null,
                    IsSyntheticPropertyTypeRequired = true,
                    RelatedModelRemoveMethod = typeof(O2MPerson4).GetMethods().FirstOrDefault(o => o.Name == "RemoveCar" && o.GetParameters().Length == 1 && o.GetParameters()[0].ParameterType == typeof(O2MCar4)),
                    
                }},
        
            };
        #pragma warning restore
        #endregion

        #region Owner


        public virtual Task SetOwnerAsync(O2MPerson4 owner)
        {
            return this.SetManyToOneAsync(o => o.Owner, owner, o => o.RemoveCarAsync, o => o.Cars);
        }

        public virtual void SetOwner(O2MPerson4 owner)
        {
            this.SetManyToOne(o => o.Owner, owner, o => o.RemoveCar, o => o.Cars);
        }

        public virtual void UnsetOwner()
        {
            this.UnsetManyToOne(o => o.Owner, o => o.Cars);
        }

        public virtual Task UnsetOwnerAsync()
        {
            return this.UnsetManyToOneAsync(o => o.Owner, o => o.Cars);
        }

        #endregion


        private void ResetField<T>(ref T field, T value, ref bool synthIsSetField)
        {
            field = value;
            synthIsSetField = false;
        }
    }
}
