//----------------------
// <auto-generated>
//    Generated by T4FluentNH.
// </auto-generated>
//----------------------
// ReSharper disable All
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.CodeDom.Compiler;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using FluentNHibernate.Automapping;
using FluentNHibernate.Mapping;
using T4FluentNH.Metadata;
using NHibernate;
using NHibernate.Collection;
using NHibernate.Util;
using System.Threading.Tasks;
//<EntityProjectItem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><EntityFullName>T4FluentNH.Tests.Naming.Case</EntityFullName><EntityFilePaths><string>Naming\Case.cs</string></EntityFilePaths><OverrideFilePaths /><GeneratedFilePath>Case.generated.cs</GeneratedFilePath></EntityProjectItem>
namespace T4FluentNH.Tests.Naming
{
    [GeneratedCode("T4Template", "1.0")]
    public partial class Case
    {

        #region RelationsMetadata
        #pragma warning disable

        public new static readonly Dictionary<string, RelationMetadata> RelationsMetadata =
            new Dictionary<string, RelationMetadata>
            {
                {"Switch", new OneToOneRelationMetadata
                {
                    RelatedModelType = typeof(Switch),
                    RelatedModelProperty = typeof(Switch).GetProperty("Case"),
                    RelatedModelIdProperty = typeof(Switch).GetProperty("Id"),
                    AssociationType = AssociationType.Bidirectional,
                    Field = typeof(Case).GetField("_switch", BindingFlags.Instance | BindingFlags.NonPublic),
                    ParameterName = "@switch",
                    Property = typeof(Case).GetProperty("Switch"),
                    SetMethod = typeof(Case).GetMethods().FirstOrDefault(o => o.Name == "SetSwitch" && o.GetParameters().Length == 1 && o.GetParameters()[0].ParameterType == typeof(Switch)),
                    UnsetMethod = typeof(Case).GetMethods().FirstOrDefault(o => o.Name == "UnsetSwitch" && o.GetParameters().Length == 0),
                    SyntheticProperty = typeof(Case).GetProperty("SwitchId"),
                    SyntheticField = typeof(Case).GetField("_switchId", BindingFlags.Instance | BindingFlags.NonPublic),
                    SyntheticPropertyMaxLength = null,
                    IsSyntheticPropertyTypeRequired = false,
                    
                }},
        
                {"Uses", new OneToManyRelationMetadata
                {
                    RelatedModelType = typeof(Use),
                    RelatedModelProperty = typeof(Use).GetProperty("Case"),
                    RelatedModelIdProperty = typeof(Use).GetProperty("Id"),
                    AssociationType = AssociationType.Bidirectional,
                    Field = typeof(Case).GetField("_uses", BindingFlags.Instance | BindingFlags.NonPublic),
                    ParameterName = "us",
                    Property = typeof(Case).GetProperty("Uses"),
                    AddMethod = typeof(Case).GetMethods().FirstOrDefault(o => o.Name == "AddUse" && o.GetParameters().Length == 1 && o.GetParameters()[0].ParameterType == typeof(Use)),
                    RemoveMethod = typeof(Case).GetMethods().FirstOrDefault(o => o.Name == "RemoveUse" && o.GetParameters().Length == 1 && o.GetParameters()[0].ParameterType == typeof(Use)),
                    CollectionMapType = CollectionMapType.Unknown,
                    
                }},
        
            };
        #pragma warning restore
        #endregion

        #region Switch

        private Switch _switch;

        [ReadOnly(true)]
        public virtual int? SwitchId 
        { 
            get
            {
                if(_isSwitchIdSet) return _switchId;
                return Switch == null ? default(int?) : Switch.Id;
            }
            set 
            {
                _isSwitchIdSet = true;
                _switchId = value; 
            }
        }

        private int? _switchId;

        private bool _isSwitchIdSet = false;

        public virtual void SetSwitch(Switch @switch)
        {
            this.SetOneToOne(o => o.Switch, @switch, o => o.Case);
        }

        public virtual Task SetSwitchAsync(Switch @switch)
        {
            return this.SetOneToOneAsync(o => o.Switch, @switch, o => o.Case);
        }

        public virtual void UnsetSwitch()
        {
            this.UnsetOneToOne(o => o.Switch, o => o.Case);
        }    

        public virtual Task UnsetSwitchAsync()
        {
            return this.UnsetOneToOneAsync(o => o.Switch, o => o.Case);
        }    

        #endregion

        #region Uses

        private ISet<Use> _uses;

        public virtual void AddUse(Use us)
        {
            this.AddOneToMany(o => o.Uses, us, o => o.Case, o=> o.RemoveUse);
        }

        public virtual Task AddUseAsync(Use us)
        {
            return this.AddOneToManyAsync(o => o.Uses, us, o => o.Case, o=> o.RemoveUseAsync);
        }

        public virtual void RemoveUse(Use us)
        {
            this.RemoveOneToMany(o => o.Uses, us, o => o.Case);
        }

        public virtual Task RemoveUseAsync(Use us)
        {
            return this.RemoveOneToManyAsync(o => o.Uses, us, o => o.Case);
        }

        #endregion


        private void ResetField<T>(ref T field, T value, ref bool synthIsSetField)
        {
            field = value;
            synthIsSetField = false;
        }
    }
}
