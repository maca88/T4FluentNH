//----------------------
// <auto-generated>
//    Generated by T4FluentNH.
// </auto-generated>
//----------------------
// ReSharper disable All
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.CodeDom.Compiler;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using FluentNHibernate.Automapping;
using FluentNHibernate.Mapping;
using T4FluentNH.Metadata;
using NHibernate;
using NHibernate.Collection;
using NHibernate.Util;
using System.Threading.Tasks;
//<EntityProjectItem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><EntityFullName>T4FluentNH.Tests.Generics.GenUserRole&lt;TUser&gt;</EntityFullName><EntityFilePaths><string>Generics\GenUserRole.cs</string></EntityFilePaths><OverrideFilePaths /><GeneratedFilePath>GenUserRole(TUser).generated.cs</GeneratedFilePath></EntityProjectItem>
namespace T4FluentNH.Tests.Generics
{
    [GeneratedCode("T4Template", "1.0")]
    public partial class GenUserRole<TUser>
    {

        #region RelationsMetadata
        #pragma warning disable

        public new static readonly Dictionary<string, RelationMetadata> RelationsMetadata =
            new Dictionary<string, RelationMetadata>
            {
                {"Role", new ManyToOneRelationMetadata
                {
                    RelatedModelType = typeof(GenRole),
                    RelatedModelIdProperty = typeof(GenRole).GetProperty("Id"),
                    AssociationType = AssociationType.Unidirectional,
                    Field = typeof(GenUserRole<TUser>).GetField("_role", BindingFlags.Instance | BindingFlags.NonPublic),
                    ParameterName = "role",
                    Property = typeof(GenUserRole<TUser>).GetProperty("Role"),
                    SyntheticProperty = typeof(GenUserRole<TUser>).GetProperty("RoleId"),
                    SyntheticField = typeof(GenUserRole<TUser>).GetField("_roleId", BindingFlags.Instance | BindingFlags.NonPublic),
                    SyntheticPropertyMaxLength = null,
                    IsSyntheticPropertyTypeRequired = false,
                    
                }},
        
            };
        #pragma warning restore
        #endregion

        #region Role

        private GenRole _role;

        [ReadOnly(true)]
        public virtual int? RoleId 
        {
            get 
            {
                if(_isRoleIdSet) return _roleId;
                return Role == null ? default(int?) : Role.Id;
            }
            set 
            {
                _isRoleIdSet = true;
                _roleId = value; 
            }
        }

        private int? _roleId;

        private bool _isRoleIdSet = false;

        #endregion


        private void ResetField<T>(ref T field, T value, ref bool synthIsSetField)
        {
            field = value;
            synthIsSetField = false;
        }
    }
}
