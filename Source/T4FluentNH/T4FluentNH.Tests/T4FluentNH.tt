<#@ template language="C#" debug="true" hostSpecific="true"#>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="EnvDTE"#>
<#@ assembly name="EnvDTE80" #>
<#@ assembly Name="System.Data.dll" #>
<#@ assembly Name="System.Data.Entity.dll" #>
<#@ assembly Name="System.Data.Entity.Design.dll" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop.8.0" #>
<#@ assembly Name="System.Windows.Forms.dll" #>
<#@ assembly name="VSLangProj" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Security.Policy" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Xml.Schema" #>
<#@ import namespace="System.Xml.XPath" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Data.Entity" #>
<#@ import namespace="System.Data.Entity.Design.PluralizationServices" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Windows.Forms" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="Microsoft.CSharp" #>
<#@ import namespace="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments

<# 
	// create an instance of the AutomationHelper class so 
	// that it is accessible from everywhere within the template
	//this.VisualStudioHelper = new AutomationHelper(this.Host);
	VSHelper = new VisualStudioHelper(this);
#>




<#
//System.Diagnostics.Debugger.Launch();
//System.Diagnostics.Debugger.Break();	

GlobalContainer.VSHelper = VSHelper;
GlobalContainer.ProjectItems = VSHelper.GetAllProjectItems();
GlobalContainer.ProjectTypes = VSHelper.GetAllTypes(GlobalContainer.ProjectItems);
GlobalContainer.Settings = XmlSettings.Load(VSHelper.Host.TemplateFile + ".settings.xml");
GlobalContainer.KnownNamespaces = new HashSet<string>
    {
        "System",
        "System.Collections.Generic",
        "System.ComponentModel",
        "System.CodeDom.Compiler",
        "System.Linq.Expressions",
        "System.Reflection",
        "FluentNHibernate.Automapping",
    };

//reset static props
GlobalContainer.Reset();

/*TODOS*/
//TODO: Strict - do note that non public getter or setter are not serialized/deserialized by default with Json.net

#region Overrides

//Get and save all overrides
VSHelper.ProcessFiles(GlobalContainer.ProjectItems, (file, name) => VSHelper.ProcessTypes(file, (type, pItem) => 
    {
		if(VSHelper.GetAttribute(type.Attributes, "System.CodeDom.Compiler.GeneratedCodeAttribute") != null)
		{
			GlobalContainer.GeneratedFiles.Add(type.FullName, pItem.FileNames[0]);
			return;
		}
        var mapOverride =
            type.ImplementedInterfaces.OfType<CodeElement>()
                .FirstOrDefault(o => o.FullName.Contains("IAutoMappingOverride"));

		if(mapOverride == null) return;
		var overrideType = VSHelper.GetGenericAgruments(mapOverride.FullName)[0];
		if(overrideType == null) return;
		if(!GlobalContainer.Overrides.ContainsKey(overrideType))
			GlobalContainer.Overrides.Add(overrideType, new Dictionary<string, ModelRelation>());

		//VSHelper.Warning("Overrides found for type " + overrideType);

		GlobalContainer.DomainOverrideFiles.Add(overrideType, pItem.FileNames[0]);

        EntityType entityType = null;

		//Get properties for overriden type
		var properties = new Dictionary<string, CodeProperty2>();
		foreach(var partialType in GlobalContainer.ProjectTypes[overrideType])
		{
		    if (entityType == null)
		        entityType = GlobalContainer.Settings.GetEntityType(VSHelper, partialType, false);

		    foreach (var p in VSHelper.GetProperties(partialType))
		    {
		        if(properties.ContainsKey(p.Name))
					throw new Exception(string.Format("Duplicate property {0} inside type {1}", p.Name, partialType.FullName));
				properties.Add(p.Name, p);
		    }
				
        }

        if(entityType == null)
            throw new Exception("EntityType for type " + overrideType + " does not exists");

		//get override method
		var method = VSHelper.GetMethod(type, "Override");
		if(method == null) return;
		var functionText = VSHelper.GetCodeFunctionText(method);
		
        //Components
        var compRegex = new Regex(@"\.Component\([\w\s]+=>[\s\w]+\.([\w\d]+)");
        var compMatches = compRegex.Matches(functionText);
        foreach (var match in compMatches.OfType<Match>().Where(o => o.Success))
        {
            var propName = match.Groups[1].Value;
            if(!properties.ContainsKey(propName)) continue;
            var prop = properties[propName];
            if(prop == null) throw new Exception("prop null");
            if(!GlobalContainer.Components.ContainsKey(overrideType))
                GlobalContainer.Components.Add(overrideType, new Dictionary<string, CodeProperty2>());
            GlobalContainer.Components[overrideType].Add(propName, prop);
        }

        //oneToMany relation
		var oneToManyRegex = new Regex(@"\.HasMany\([\w\s]+=>[\s\w]+\.([\w\d]+)\)([^;]*)");
		var oneToManyMatches = oneToManyRegex.Matches(functionText);
		foreach(var match in oneToManyMatches.OfType<Match>().Where(o => o.Success))
        {
			var propName = match.Groups[1].Value;
			var extraCalls = match.Groups[2].Value;
            if(!properties.ContainsKey(propName)) continue;
            var prop = properties[propName];
            if(prop == null) throw new Exception("prop null");
			var relatedPropType = VSHelper.GetGenericAgruments(prop.Type).First();
			if(relatedPropType == null) throw new Exception("relatedPropType null");

            var relatedPropName = "";
            var keyColumn = "";

            //KeyColumn - support KeyColumn(o => o.Category) or KeyColumn("CategoryId")
            var keyColumnRegex = new Regex(@"\.KeyColumn\([\w\s]+=>[\s\w]+\.([\w\d]+)\)|\.KeyColumn\(""([\w\d]+)""\)");
		    var keyColumnMatches = keyColumnRegex.Matches(extraCalls);
            foreach (var keyColumnMatch in keyColumnMatches.OfType<Match>().Where(o => o.Success))
            {
                keyColumn = !string.IsNullOrEmpty(keyColumnMatch.Groups[1].Value)
                    ? entityType.KeyColumnPrefix + keyColumnMatch.Groups[1].Value + entityType.KeyColumnPostfix
                    : keyColumnMatch.Groups[2].Value;
                relatedPropName = VSHelper.Trim(keyColumn, entityType.KeyColumnPrefix, entityType.KeyColumnPostfix);
            }

            //PropertyRef - support PropertyRef(o => o.Category) or PropertyRef("CategoryId")
            var propRefRegex = new Regex(@"\.PropertyRef\([\w\s]+=>[\s\w]+\.([\w\d]+)\)|\.PropertyRef\(""([\w\d]+)""\)");
		    var propRefMatches = propRefRegex.Matches(extraCalls);
            foreach (var propRefMatch in propRefMatches.OfType<Match>().Where(o => o.Success))
            {
                relatedPropName = !string.IsNullOrEmpty(propRefMatch.Groups[1].Value)
                    ? propRefMatch.Groups[1].Value
                    : propRefMatch.Groups[2].Value;
            }

            if (string.IsNullOrEmpty(relatedPropName)) continue;

            //CollectionType - support AsBag(), AsList(), AsSet
            var collTypeRegex = new Regex(@"\.(AsList|AsSet|AsBag)");
            var collTypeMatches = collTypeRegex.Matches(extraCalls);
            var colType = CollectionMapType.Unknown;
            foreach (var collTypeMatch in collTypeMatches.OfType<Match>().Where(o => o.Success))
            {
                var cType = collTypeMatch.Groups[1].Value;
                switch(cType)
                {
                    case "AsSet":
                        colType = CollectionMapType.Set;
                        break;
                    case "AsList":
                        colType = CollectionMapType.List;
                        break;
                    case "AsBag":
                        colType = CollectionMapType.Bag;
                        break;
                }
            }

            var relatedProp = VSHelper.GetProperties(GlobalContainer.ProjectTypes[relatedPropType]).FirstOrDefault(o => o.Name == relatedPropName);
            var assocType = relatedProp == null ? AssociationType.Unidirectional : AssociationType.Bidirectional;
            
            //Add oneToMany
			GlobalContainer.Overrides[overrideType].Add(propName,
				new OneToManyModelRelation
						{
							RelatedModelTypeFullName =relatedPropType,
							CollectionType = VSHelper.GetPropertyType(prop),
                            CollectionMapType = colType,
							Property = prop, //many
                            KeyColumn = keyColumn,
							PathInRelatedModel = relatedProp == null ? null : relatedPropName, //one
                            AssociationType = assocType
						});

            //Add manyToOne
            var manyToOneRelation = new ManyToOneModelRelation
            {
                RelatedModelTypeFullName = overrideType,
                Property = relatedProp,
                KeyColumn = keyColumn,
                PathInRelatedModel = propName,
                AssociationType = assocType
            };

            if (relatedProp == null) //Unidirectional association
            {
                GlobalContainer.AddGlobalModelRelation(relatedPropType, manyToOneRelation);
            }
            else
            {
                if(!GlobalContainer.Overrides.ContainsKey(relatedPropType))
				    GlobalContainer.Overrides.Add(relatedPropType, new Dictionary<string, ModelRelation>());
                GlobalContainer.Overrides[relatedPropType].Add(relatedPropName, manyToOneRelation);
            }

        }

		//oneToOne relation
		var oneToOneRegex = new Regex(@"\.HasOne\([\w\s]+=>[\s\w]+\.([\w\d]+)\)([^;]*)");
		var oneToOneMatches = oneToOneRegex.Matches(functionText);
		foreach(var match in oneToOneMatches.OfType<Match>().Where(o => o.Success))
        {
			var propName = match.Groups[1].Value;
			var extraCalls = match.Groups[2].Value;
			var prop = properties[propName];
			if(prop == null) throw new Exception("prop null");
			var relatedPropType = prop.Type.CodeType.FullName;

            //PropertyRef - support PropertyRef(o => o.Category) or PropertyRef("CategoryId")
            var propRefRegex = new Regex(@"\.PropertyRef\([\w\s]+=>[\s\w]+\.([\w\d]+)\)|\.PropertyRef\(""([\w\d]+)""\)");
		    var propRefMatches = propRefRegex.Matches(extraCalls);
            var relatedPropName = "";
            foreach (var propRefMatch in propRefMatches.OfType<Match>().Where(o => o.Success))
            {
                relatedPropName = !string.IsNullOrEmpty(propRefMatch.Groups[1].Value)
                    ? propRefMatch.Groups[1].Value
                    : propRefMatch.Groups[2].Value;
            }
            if (string.IsNullOrEmpty(relatedPropName)) continue;
            var relatedProp = VSHelper.GetProperties(GlobalContainer.ProjectTypes[relatedPropType]).First(o => o.Name == relatedPropName);

			//Add oneToOne
			GlobalContainer.Overrides[overrideType].Add(propName,
				new OneToOneModelRelation
						{
							RelatedModelTypeFullName = relatedPropType,
							Property = prop, 
							PathInRelatedModel = relatedPropName ,
                            AssociationType = AssociationType.Bidirectional
						});
			//Add one to one
			if(!GlobalContainer.Overrides.ContainsKey(relatedPropType))
				GlobalContainer.Overrides.Add(relatedPropType, new Dictionary<string, ModelRelation>());

			if(!GlobalContainer.Overrides[relatedPropType].ContainsKey(relatedPropName)) //if is not self related
            {
				GlobalContainer.Overrides[relatedPropType].Add(relatedPropName,
				new OneToOneModelRelation
						{
							RelatedModelTypeFullName = overrideType,
							Property = relatedProp, 
							PathInRelatedModel = propName,
                            AssociationType = AssociationType.Bidirectional
						});
            }
        }

		//manyToMany relation
		var manyToManyRegex = new Regex(@"\.HasManyToMany\([\w\s]+=>[\s\w]+\.([\w\d]+)\)");
		var manyToManyMatches = manyToManyRegex.Matches(functionText);
		foreach(Match match in manyToManyMatches)
        {
			if (!match.Success) continue;
			var propName = match.Groups[1].Value;
			var prop = properties[propName];
			if(prop == null) throw new Exception("prop null");
			var relatedPropType = VSHelper.GetGenericAgruments(prop.Type).First();

			foreach(var relPartialType in GlobalContainer.ProjectTypes[relatedPropType])
            {
				foreach(var relTypeProp in VSHelper.GetProperties(relPartialType))
				{
					//VSHelper.Warning(type.FullName + " - " +overrideType + " - " + relTypeProp.Name +" - "+ VSHelper.GetGenericAgruments(relTypeProp.Type).FirstOrDefault());
					if(
						VSHelper.IsNHibernateProperty(relTypeProp) &&
						VSHelper.IsGeneric(relTypeProp.Type) &&
						VSHelper.GetGenericAgruments(relTypeProp.Type).FirstOrDefault() == overrideType &&
						!GlobalContainer.Overrides[overrideType].ContainsKey(propName))
                    {
						//add manyToMany
						GlobalContainer.Overrides[overrideType].Add(propName,
							new ManyToManyModelRelation
									{
										RelatedModelTypeFullName = relatedPropType,
										CollectionType = VSHelper.GetPropertyType(prop),
										Property = prop, 
										PathInRelatedModel = relTypeProp.Name,
                                        AssociationType = AssociationType.Bidirectional
									});
                    }	
				}
            }

			
        }
	}));

#endregion

var manager = Manager.Create(Host, GenerationEnvironment);

VSHelper.ProcessFiles(GlobalContainer.ProjectItems, (file, name) => 
	VSHelper.ProcessTypes(file, (type, pItem) => 
		{
			if(VSHelper.GetAttribute(type.Attributes, "System.CodeDom.Compiler.GeneratedCodeAttribute") != null) return;
			//VSHelper.GetAllCodeElementsOfType(type.)
			if(!type.IsDerivedFrom[GlobalContainer.Settings.BaseEntityType] || GlobalContainer.Settings.IgnoreTypes.Contains(type.FullName)) return;
			//VSHelper.Warning(pItem.get_FileNames(0) + " gener created: " + (GlobalContainer.GeneratedFiles.ContainsKey(type.FullName) ?  File.GetCreationTime(GlobalContainer.GeneratedFiles[type.FullName]).ToString() : "WTF") + " gener modif: " + (GlobalContainer.GeneratedFiles.ContainsKey(type.FullName) ?  File.GetLastWriteTime(GlobalContainer.GeneratedFiles[type.FullName]).ToString() : "WTF") + " real: " + File.GetLastWriteTime(pItem.get_FileNames(0)));
			var domainModelModified = true;

			/*
			if(GlobalContainer.GeneratedFiles.ContainsKey(type.FullName) && File.GetLastWriteTime(GlobalContainer.GeneratedFiles[type.FullName]) >= File.GetLastWriteTime(pItem.get_FileNames(0))) //if there were no changes on domain model
			{
				if(
					!GlobalContainer.DomainOverrideFiles.ContainsKey(type.FullName) || 
					(
						GlobalContainer.DomainOverrideFiles.ContainsKey(type.FullName) && File.GetLastWriteTime(GlobalContainer.GeneratedFiles[type.FullName]) >= File.GetLastWriteTime(GlobalContainer.DomainOverrideFiles[type.FullName])
					)) //if override mapping for domain model was changed
                {
					VSHelper.Warning(string.Format("No changes made on type '{0}'", type.FullName));
					manager.KeepGeneratedFile(GlobalContainer.GeneratedFiles[type.FullName]);
					return;
                }
				domainModelModified = false;
			}*/

		    var domainClass = new DomainModelWrapper
		    {
		        CodeClass = type,
		        ProjectItem = pItem,
				WasModified = domainModelModified,
		    };

			if(!GlobalContainer.DomainClasses.ContainsKey(type.FullName))
				GlobalContainer.DomainClasses.Add(type.FullName, domainClass);
			else
				GlobalContainer.DomainClasses[type.FullName].Merge(domainClass);
			//Warning(string.Format("Processing type: '{0}' with parameter WasModified = {1}", type.FullName, domainModelModified));
		}));

//Initialize All DomainClasses
foreach (var domainClass in GlobalContainer.DomainClasses)
{
    domainClass.Value.Initialize();	
}

manager.StartHeader(); 

foreach (var ns in GlobalContainer.KnownNamespaces)
{
#>
using <#=ns#>;
<#
}
manager.EndBlock(); 

foreach(var type in GlobalContainer.DomainClasses.Values)
{
	manager.StartNewFile(string.Format("{0}.generated.cs", type.FileName)); 
#>
namespace <#=type.Namespace.FullName#>
{
	[GeneratedCode("T4Template", "1.0")]
	public partial class <#=type.FullClassName#>
	{

<#
    if (GlobalContainer.Components.ContainsKey(type.FullName))
    {
#>
        #region Components fileds
<#
        foreach (var comp in GlobalContainer.Components[type.FullName])
        {
#>
        private <#=comp.Value.Type.AsFullName#> <#=VSHelper.GetFieldName(comp.Key)#>;
<#
        }
#>
        #endregion
<#
    }
#>
<#
	foreach(var relation in type.RelatedModels)
	{
#>
		#region <#=relation.PropertyName#>

<#
		switch(relation.Type)
        {
			case ModelRelationType.OneToMany:
                var oneToManyRelation = (OneToManyModelRelation) relation;
#>
		private <#=oneToManyRelation.FieldCollectionType#> <#=oneToManyRelation.FieldName#>;
<#
                if (relation.AssociationType == AssociationType.Bidirectional)
                {
                    if (!oneToManyRelation.ExistsAddMethod)
                    {
#>

        public virtual void <#=oneToManyRelation.AddMethodName #>(<#=oneToManyRelation.RelatedModelTypeName #> <#=oneToManyRelation.ParameterName #>)
        {
            this.AddOneToMany(o => o.<#=relation.PropertyName #>, <#=oneToManyRelation.ParameterName #>, o => o.<#=relation.PathInRelatedModel #>, o=> o.<#=oneToManyRelation.RemoveMethodName #>);
        }
<#
                    }
					if (!oneToManyRelation.ExistsRemoveMethod)
					{
#>

        public virtual void <#=oneToManyRelation.RemoveMethodName #>(<#=oneToManyRelation.RelatedModelTypeName #> <#=oneToManyRelation.ParameterName #>)
        {
			this.RemoveOneToMany(o => o.<#=relation.PropertyName #>, <#=oneToManyRelation.ParameterName #>, o => o.<#=relation.PathInRelatedModel #>);
        }
<#
					}
                }
                break;
			case ModelRelationType.ManyToMany:
				var manyToManyRelation = (ManyToManyModelRelation) relation;
#>
		private <#=manyToManyRelation.FieldCollectionType#> <#=manyToManyRelation.FieldName#>;
<#
                if (relation.AssociationType == AssociationType.Bidirectional)
                {
                    if (!manyToManyRelation.ExistsAddMethod)
                    {
#>
        public virtual void <#=manyToManyRelation.AddMethodName#>(<#=manyToManyRelation.RelatedModelTypeName#> <#=manyToManyRelation.ParameterName#>)
        {
            this.AddManyToMany(o => o.<#=relation.PropertyName #>, <#=manyToManyRelation.ParameterName #>, o => o.<#=relation.PathInRelatedModel #>);
        }
<#
                    }
					if (!manyToManyRelation.ExistsRemoveMethod)
					{
#>

        public virtual void <#=manyToManyRelation.RemoveMethodName #>(<#=manyToManyRelation.RelatedModelTypeName #> <#=manyToManyRelation.ParameterName #>)
        {
            this.RemoveManyToMany(o => o.<#=relation.PropertyName #>, <#=manyToManyRelation.ParameterName #>, o => o.<#=relation.PathInRelatedModel #>);
        }
<#
					}
                }
                break;
			case ModelRelationType.ManyToOne:
				var manyToOneRelation = (ManyToOneModelRelation) relation;
                if (manyToOneRelation.GenerateSyntheticProperty)
                {
#>
        private <#=relation.RelatedModelTypeName#> <#=relation.FieldName#>;

<#  
                    foreach (var attr in GlobalContainer.Settings.SyntheticProperties.CustomAttributes)
                    {
#>
        [<#=attr#>]
<#                       
                    }
                    if (manyToOneRelation.IsSyntheticPropertyTypeRequired && !string.IsNullOrEmpty(GlobalContainer.Settings.NotNullAttribute) && GlobalContainer.Settings.SyntheticProperties.AddNotNullAttribute)
                    {
#>
        [<#=GlobalContainer.Settings.NotNullAttribute#>]
<#
                    }
                    if (!string.IsNullOrEmpty(manyToOneRelation.SyntheticPropertyMaxLength) && !string.IsNullOrEmpty(GlobalContainer.Settings.LengthAttribute) && GlobalContainer.Settings.SyntheticProperties.AddLengthAttribute)
                    {
#>
        [<#=GlobalContainer.Settings.LengthAttribute#>(<#=manyToOneRelation.SyntheticPropertyMaxLength#>)]
<#
                    }
					if(relation.Property == null)
					{
#>
        public virtual <#=manyToOneRelation.SyntheticPropertyTypeName#> <#=manyToOneRelation.SyntheticPropertyName#> { get; <#=GlobalContainer.Settings.Strict ? "protected " : ""#>set; }
<#
					}
					else
					{
#>
		public virtual <#=manyToOneRelation.SyntheticPropertyTypeName#> <#=manyToOneRelation.SyntheticPropertyName#> 
		{ 
			get { return <#=manyToOneRelation.SyntheticFieldName#> != default(<#=manyToOneRelation.SyntheticPropertyTypeName#>) || <#=manyToOneRelation.PropertyName#> == null ? <#=manyToOneRelation.SyntheticFieldName#> : <#=manyToOneRelation.PropertyName#>.<#=manyToOneRelation.RelatedModelIdPropertyName#>; } 
			<#=GlobalContainer.Settings.Strict ? "protected " : ""#>set { <#=manyToOneRelation.SyntheticFieldName#> = value; }
		}

		private <#=manyToOneRelation.SyntheticPropertyTypeName#> <#=manyToOneRelation.SyntheticFieldName#>;
<#
					}    
                }
                if (relation.AssociationType == AssociationType.Bidirectional)
                {
					if(!manyToOneRelation.ExistsSetMethod)
					{
#>

        public virtual void <#=manyToOneRelation.SetMethodName #>(<#=manyToOneRelation.RelatedModelTypeName #> <#=manyToOneRelation.ParameterName #>)
        {
			this.SetManyToOne(o => o.<#=manyToOneRelation.PropertyName #>, <#=manyToOneRelation.ParameterName #>, o => o.<#=manyToOneRelation.RelatedTypeRemoveMethodName#>, o => o.<#=relation.PathInRelatedModel #>);
        }
<#
                    }
					if (!manyToOneRelation.ExistsUnsetMethod)
					{
#>

        public virtual void <#=manyToOneRelation.UnsetMethodName #>()
        {
			this.UnsetManyToOne(o => o.<#=manyToOneRelation.PropertyName #>, o => o.<#=relation.PathInRelatedModel #>);
        }
<#
					}
                }
                break;
			case ModelRelationType.OneToOne:
				var oneToOneRelation = (OneToOneModelRelation) relation;
                if (oneToOneRelation.GenerateSyntheticProperty)
                {
#>
        private <#=relation.RelatedModelTypeName#> <#=relation.FieldName#>;

<#  
                    foreach (var attr in GlobalContainer.Settings.SyntheticProperties.CustomAttributes)
                    {
#>
        [<#=attr#>]
<#                       
                    }
                    if (oneToOneRelation.IsSyntheticPropertyTypeRequired && !string.IsNullOrEmpty(GlobalContainer.Settings.NotNullAttribute) && GlobalContainer.Settings.SyntheticProperties.AddNotNullAttribute)
                    {
#>
        [<#=GlobalContainer.Settings.NotNullAttribute#>]
<#
                    }
                    if (!string.IsNullOrEmpty(oneToOneRelation.SyntheticPropertyMaxLength) && !string.IsNullOrEmpty(GlobalContainer.Settings.LengthAttribute) && GlobalContainer.Settings.SyntheticProperties.AddLengthAttribute)
                    {
#>
        [<#=GlobalContainer.Settings.LengthAttribute#>(<#=oneToOneRelation.SyntheticPropertyMaxLength#>)]
<#
                    }
					if(relation.Property == null)
					{
#>
        public virtual <#=oneToOneRelation.SyntheticPropertyTypeName#> <#=oneToOneRelation.SyntheticPropertyName#> { get; <#=GlobalContainer.Settings.Strict ? "protected " : ""#>set; }
<#
					}
					else
					{
#>
		public virtual <#=oneToOneRelation.SyntheticPropertyTypeName#> <#=oneToOneRelation.SyntheticPropertyName#> 
		{ 
			get { return <#=oneToOneRelation.SyntheticFieldName#> != default(<#=oneToOneRelation.SyntheticPropertyTypeName#>) || <#=oneToOneRelation.PropertyName#> == null ? <#=oneToOneRelation.SyntheticFieldName#> : <#=oneToOneRelation.PropertyName#>.<#=oneToOneRelation.RelatedModelIdPropertyName#>; } 
			<#=GlobalContainer.Settings.Strict ? "protected " : ""#>set { <#=oneToOneRelation.SyntheticFieldName#> = value; }
		}

		private <#=oneToOneRelation.SyntheticPropertyTypeName#> <#=oneToOneRelation.SyntheticFieldName#>;
<#
					}    
                }
                if (relation.AssociationType == AssociationType.Bidirectional)
                {
					if(!oneToOneRelation.ExistsSetMethod)
					{
#>

		public virtual void <#=oneToOneRelation.SetMethodName #>(<#=oneToOneRelation.RelatedModelTypeName #> <#=oneToOneRelation.ParameterName #>)
        {
			this.SetOneToOne(o => o.<#=oneToOneRelation.PropertyName #>, <#=oneToOneRelation.ParameterName #>, o => o.<#=relation.PathInRelatedModel #>);
        }
<#
                    }
					if (!oneToOneRelation.ExistsUnsetMethod)
					{
#>

        public virtual void <#=oneToOneRelation.UnsetMethodName #>()
        {
			this.UnsetOneToOne(o => o.<#=oneToOneRelation.PropertyName #>, o => o.<#=relation.PathInRelatedModel #>);
        }	
<#
					}
                }
                break;
        }
#>

		#endregion

<#
	}
    if (GlobalContainer.Settings.SyntheticProperties.Generate)
    {
#>

		private void SetField<T, TSynth>(ref T field, T vatue, ref TSynth synthField)
        {
            field = vatue;
            synthField = default(TSynth);
        }
<#  
    }
#>
	}
}
<#
	manager.EndBlock();
}
manager.Process(true); 
#>

namespace FluentNHibernate.Automapping
{
    internal static class EntityExtensions
    {
        private static void AddIfNotExist<T>(ICollection<T> collection, T item)
        {
            if (!collection.Contains(item))
                collection.Add(item);
        }

        private static void RemoveIfExist<T>(ICollection<T> collection, T item)
        {
            if (collection.Contains(item))
                collection.Remove(item);
        }

        public static PropertyInfo GetPropertyInfo<TSource, TProperty>(TSource source, Expression<Func<TSource, TProperty>> propertyLambda)
        {
            var type = typeof(TSource);

            var member = propertyLambda.Body as MemberExpression;
            if (member == null)
                throw new ArgumentException(string.Format(
                    "Expression '{0}' refers to a method, not a property.",
                    propertyLambda));

            var propInfo = member.Member as PropertyInfo;
            if (propInfo == null)
                throw new ArgumentException(string.Format(
                    "Expression '{0}' refers to a field, not a property.",
                    propertyLambda.ToString()));

            if (type != propInfo.ReflectedType &&
                !type.IsSubclassOf(propInfo.ReflectedType))
                throw new ArgumentException(string.Format(
                    "Expresion '{0}' refers to a property that is not from type {1}.",
                    propertyLambda.ToString(),
                    type));

            return propInfo;
        }

        public static void AddOneToMany<TOne, TMany>(this TOne one,
            Expression<Func<TOne, IEnumerable<TMany>>> manyListExpr, TMany many,
            Expression<Func<TMany, TOne>> oneExpr,
            Expression<Func<TOne, Action<TMany>>> removeManyExpr)
            where TOne : <#=GlobalContainer.Settings.BaseEntityType#>
            where TMany : <#=GlobalContainer.Settings.BaseEntityType#>
        {
            var enumerable = manyListExpr.Compile()(one);
            var collection = (ICollection<TMany>)enumerable;
            var itemOwner = oneExpr.Compile()(many);
            var entityOwnerPropInfo = GetPropertyInfo(many, oneExpr);

            if (collection.Contains(many)) return;
            if (itemOwner != null)
                removeManyExpr.Compile()(itemOwner)(many);
            entityOwnerPropInfo.SetValue(many, one);
            collection.Add(many);

            /*
            if (Locations.Contains(location)) return;
            if (location.User != null)
                location.User.RemoveLocation(location);
            location.User = this;
            Locations.Add(location);
            */
        }

        public static void RemoveOneToMany<TOne, TMany>(this TOne one,
            Expression<Func<TOne, IEnumerable<TMany>>> manyListExpr, TMany many,
            Expression<Func<TMany, TOne>> entityExpr
            )
            where TOne : <#=GlobalContainer.Settings.BaseEntityType#>
            where TMany : <#=GlobalContainer.Settings.BaseEntityType#>
        {
            var enumerable = manyListExpr.Compile()(one);
            var collection = (ICollection<TMany>)enumerable;
            var entityOwnerPropInfo = GetPropertyInfo(many, entityExpr);

            if (!collection.Contains(many)) return;
            collection.Remove(many);
            entityOwnerPropInfo.SetValue(many, null);

            /*
            if (!Locations.Contains(location)) return;
            Locations.Remove(location);
            location.User = null;
            */
        }

        public static void SetManyToOne<TMany, TOne>(this TMany many,
            Expression<Func<TMany, TOne>> oneExpr, TOne newOne,
            Expression<Func<TOne, Action<TMany>>> removeManyExpr,
            Expression<Func<TOne, IEnumerable<TMany>>> manyExp)
            where TOne : <#=GlobalContainer.Settings.BaseEntityType#>
            where TMany : <#=GlobalContainer.Settings.BaseEntityType#>
        {
            var one = oneExpr.Compile()(many);
            var onePropInfo = GetPropertyInfo(many, oneExpr);
            var manyList = (ICollection<TMany>)manyExp.Compile()(newOne);

            if (Equals(one, newOne)) return;
            if (one != null)
                removeManyExpr.Compile()(one)(many);
            onePropInfo.SetValue(many, newOne);
            AddIfNotExist(manyList, many);

            /*
            if (User == user) return;
            if(User != null)
                User.RemoveLocation(this);
            User = user;
            AddIfNotExist(user.Locations, this);
            */
        }

        public static void UnsetManyToOne<TMany, TOne>(this TMany many,
            Expression<Func<TMany, TOne>> oneExpr,
            Expression<Func<TOne, IEnumerable<TMany>>> manyListExpr)
            where TOne : <#=GlobalContainer.Settings.BaseEntityType#>
            where TMany : <#=GlobalContainer.Settings.BaseEntityType#>
        {
            var one = oneExpr.Compile()(many);
            var onePropInfo = GetPropertyInfo(many, oneExpr);
            var manyList = (ICollection<TMany>)manyListExpr.Compile()(one);

            if (one == null) return;
            RemoveIfExist(manyList, many);
            onePropInfo.SetValue(many, null);
            /*
            if(User == null) return;
            RemoveIfExist(User.Locations, this);
            User = null;*/
        }

        public static void AddManyToMany<TMany, TMany2>(this TMany many,
            Expression<Func<TMany, IEnumerable<TMany2>>> many2ListExpr, TMany2 many2,
            Expression<Func<TMany2, IEnumerable<TMany>>> manyListExpr)
            where TMany : <#=GlobalContainer.Settings.BaseEntityType#>
            where TMany2 : <#=GlobalContainer.Settings.BaseEntityType#>
        {
            var many2List = (ICollection<TMany2>)many2ListExpr.Compile()(many);
            var manyList = (ICollection<TMany>)manyListExpr.Compile()(many2);

            AddIfNotExist(manyList, many);
            AddIfNotExist(many2List, many2);
            /*
            camera.Locations.AddIfNotExist(this);
            Cameras.AddIfNotExist(camera);*/
        }

        public static void RemoveManyToMany<TMany, TMany2>(this TMany many,
            Expression<Func<TMany, IEnumerable<TMany2>>> many2ListExpr, TMany2 many2,
            Expression<Func<TMany2, IEnumerable<TMany>>> manyListExpr)
            where TMany : <#=GlobalContainer.Settings.BaseEntityType#>
            where TMany2 : <#=GlobalContainer.Settings.BaseEntityType#>
        {
            var many2List = (ICollection<TMany2>)many2ListExpr.Compile()(many);
            var manyList = (ICollection<TMany>)manyListExpr.Compile()(many2);

            RemoveIfExist(manyList, many);
            RemoveIfExist(many2List, many2);
            /*
            RemoveIfExist(camera.Locations, this);
            RemoveIfExist(Cameras, camera);*/
        }

        public static void SetOneToOne<TOne, TOne2>(this TOne one,
            Expression<Func<TOne, TOne2>> one2Expr, TOne2 one2,
            Expression<Func<TOne2, TOne>> oneExpr)
            where TOne : <#=GlobalContainer.Settings.BaseEntityType#>
            where TOne2 : <#=GlobalContainer.Settings.BaseEntityType#>
        {
            var oneInOne2 = oneExpr.Compile()(one2);
            var oneInOne2PropInfo = GetPropertyInfo(one2, oneExpr);
            var currentOne2 = one2Expr.Compile()(one);
            var currentOne2PropInfo = GetPropertyInfo(one, one2Expr);

            if (oneInOne2 != null)
                oneInOne2.UnsetOneToOne(one2Expr, oneExpr);
            oneInOne2PropInfo.SetValue(one2, one);
            if (currentOne2 != null)
                currentOne2.UnsetOneToOne(oneExpr, one2Expr);
            currentOne2PropInfo.SetValue(one, one2);
            /*
             if(MerryWith.MerriedWith != null)
               MerryWith.UnSet
             MerryWith.MerriedWith = this;
             if(MerryWith != null)
               UnSet
             MerriedWith = value;
             */
        }

        public static void UnsetOneToOne<TOne, TOne2>(this TOne one,
            Expression<Func<TOne, TOne2>> one2Expr,
            Expression<Func<TOne2, TOne>> oneExpr)
            where TOne : <#=GlobalContainer.Settings.BaseEntityType#>
            where TOne2 : <#=GlobalContainer.Settings.BaseEntityType#>
        {
            var one2 = one2Expr.Compile()(one);
            var one2PropInfo = GetPropertyInfo(one, one2Expr);
            var oneInOne2PropInfo = GetPropertyInfo(one2, oneExpr);

            if (one2 == null) return;
            oneInOne2PropInfo.SetValue(one2, null);
            one2PropInfo.SetValue(one, null);

            /*
            if (MerriedWith == null) return;
            MerriedWith.MerriedWith = null;  
            MerriedWith = null;
             */
        }

        private static object GetDefault(Type type)
        {
            if (type.IsValueType)
            {
                return Activator.CreateInstance(type);
            }
            return null;
        }
    }
}

<#+
public enum ModelRelationType
{
	None,
	OneToOne,
	OneToMany,
	ManyToOne,
	ManyToMany
}

public enum CollectionMapType
{
    Unknown = 0,
    Set,
    Bag,
    List
}

public enum AssociationType
{
    Unknown = 0,
    Unidirectional,
    Bidirectional
}

public abstract class ModelRelation
{
	#region Basic props

	public virtual ModelRelationType Type { get { return ModelRelationType.None; } }

	public string RelatedModelTypeFullName { get; set; }

	public string PathInRelatedModel { get; set; }

	public AssociationType AssociationType { get; set; }

	public string KeyColumn { get; set; }

	#endregion


	public DomainModelWrapper Model { get; set; }

	public DomainModelWrapper RelatedModel { get; set; }

	public EntityType RelatedModelEntityType { get; set; }

	public string FieldName { get; set; }

	public string ParameterName { get; set; }

    public string RelatedModelIdPropertyName
    {
        get { return RelatedModelEntityType.IdentifierPropertyName; }
    }

    public bool UseFullNamespaceForRelatedModelType
    {
        get
        {
            return !(
                RelatedModel != null &&
                (
                    Model.Namespace.FullName == RelatedModel.Namespace.FullName ||
                    GlobalContainer.KnownNamespaces.Contains(RelatedModel.Namespace.FullName)
                    )
                );
        }
    }

    public string RelatedModelTypeName //Is the same as RelatedModelTypeFullName when the related type is not is the same namespace
    {
        get
        {
            return RelatedModel != null
                ? (UseFullNamespaceForRelatedModelType ? RelatedModel.FullName : RelatedModel.Name)
                : (UseFullNamespaceForRelatedModelType ? RelatedModelTypeFullName : RelatedModelTypeFullName.Split('.').Last());
        }
    } 

	public CodeProperty2 Property { get; set; }

    public string PropertyName
    {
        get
        {
            return Property == null
                ? Model.Name
                : Property.Name;
        }
    }

    public string SingularPropertyName { get { return GlobalContainer.Singularize(PropertyName); } }

	
}

public class NoneModelRelation : ModelRelation
{
    public override ModelRelationType Type { get { return ModelRelationType.None; } }
}

public abstract class OneModelRelation : ModelRelation
{
	public bool GenerateSyntheticProperty { get; set; }

	public string SyntheticPropertyName { get; set; }

	public string SyntheticPropertyTypeName { get; set; }

	public string SyntheticFieldName { get; set; }

	public string SyntheticPropertyMaxLength { get; set; }

	public bool IsSyntheticPropertyTypeRequired { get; set; }

	//Only set for bidirection relation
	public bool ExistsSetMethod { get; set; }

	public string SetMethodName { get; set; }

	public bool ExistsUnsetMethod { get; set; }

	public string UnsetMethodName { get; set; }
}

public class OneToOneModelRelation : OneModelRelation
{
    public override ModelRelationType Type { get { return ModelRelationType.OneToOne; } }
}

public class ManyToOneModelRelation : OneModelRelation
{
    public override ModelRelationType Type { get { return ModelRelationType.ManyToOne; } }

	public string RelatedTypeRemoveMethodName { get; set; }
}

public abstract class CollectionModelRelation : ModelRelation
{
	#region Basic props

	public string CollectionType { get; set; }

	public CollectionMapType CollectionMapType { get; set; }

	#endregion

	public string FieldCollectionType { get; set; }

    //Only set for bidirection relation

	public bool ExistsAddMethod { get; set; }

	public string AddMethodName { get; set; }

	public bool ExistsRemoveMethod { get; set; }

	public string RemoveMethodName { get; set; }
}

public class OneToManyModelRelation : CollectionModelRelation
{
    public override ModelRelationType Type { get { return ModelRelationType.OneToMany; } }
}

public class ManyToManyModelRelation : CollectionModelRelation
{
    public override ModelRelationType Type { get { return ModelRelationType.ManyToMany; } }
}

public static class GlobalContainer
{
	public static CSharpCodeProvider CSharpCodeProvider = new CSharpCodeProvider();

    public static VisualStudioHelper VSHelper;

    public static XmlSettings Settings;



    public static Dictionary<string, List<ModelRelation>> GlobalModelRelations;

    public static Dictionary<string, DomainModelWrapper> DomainClasses;

    public static HashSet<string> KnownNamespaces;

    public static Dictionary<string, Dictionary<string, ModelRelation>> Overrides; //Dict<typeFullName, Dict<propName, Relation>>

    public static Dictionary<string, List<CodeClass2>> ProjectTypes;

    public static IEnumerable<ProjectItem> ProjectItems;

    public static Dictionary<string, string> GeneratedFiles;

	public static Dictionary<string, string> DomainOverrideFiles;

    public static Dictionary<string, Dictionary<string, CodeProperty2>> Components; //Dict<typeFullName, PropName, PropTypefullName>


	public static string Singularize(string name)
	{
	    foreach (var singularize in Settings.Singularization
			.Where(singularize => Regex.IsMatch(name, singularize.Pattern)))
	    {
	        return Regex.Replace(name, singularize.Pattern, singularize.Replace);
	    }

	    return VSHelper.Singularize(name);
	}

    public static void Reset()
    {
        GlobalModelRelations.Clear();
        DomainClasses.Clear();
		Overrides.Clear();
		GeneratedFiles.Clear();
		DomainOverrideFiles.Clear();
		Components.Clear();
    }

    public static EntityType GetEntityType(CodeClass2 codeClass, bool throwIfNotFound)
    {
        return Settings.GetEntityType(VSHelper, codeClass, throwIfNotFound);
    }

	public static void AddGlobalModelRelation(string typeFullName, ModelRelation relation)
    {
        if(!GlobalModelRelations.ContainsKey(typeFullName))
            GlobalModelRelations.Add(typeFullName, new List<ModelRelation>());
        GlobalModelRelations[typeFullName].Add(relation);
    }

	static GlobalContainer()
	{
		GlobalModelRelations = new Dictionary<string, List<ModelRelation>>();
		DomainClasses = new Dictionary<string, DomainModelWrapper>();
		Overrides = new Dictionary<string, Dictionary<string, ModelRelation>>();
		ProjectTypes = new Dictionary<string, List<CodeClass2>>();
		Components = new Dictionary<string, Dictionary<string, CodeProperty2>>();
	    GeneratedFiles = new Dictionary<string, string>();
		DomainOverrideFiles = new Dictionary<string, string>();
	}
}


public class DomainModelWrapper
{
	public DomainModelWrapper()
	{
		MappedProperties = new Dictionary<string, CodeProperty2>();
		RelatedModels = new List<ModelRelation>();
	}
	
	#region Settable props

	public CodeClass2 CodeClass { get; set; }

	public ProjectItem ProjectItem { get; set; }

	public bool WasModified { get; set; }

	public List<ModelRelation> RelatedModels { get; set; }

	#endregion


	public Dictionary<string, CodeProperty2> MappedProperties { get; private set; }

	public EntityType EntityType { get; private set; }

    public string FullClassName
    {
        get
        {
            return CodeClass.IsGeneric
                ? Name + string.Format("<{0}>", string.Join(", ", GlobalContainer.VSHelper.GetGenericAgruments(FullName)))
                : Name;
        }
    }

    public string FileName
    {
        get
        {
            return CodeClass.IsGeneric
                ? string.Format("{0}({1})", Name, string.Join("_", GlobalContainer.VSHelper.GetGenericAgruments(FullName)))
                : Name;
        }
    }

	public string Name { get { return CodeClass.Name; } }

	public CodeNamespace Namespace { get { return CodeClass.Namespace; } }

	public string FullName { get { return CodeClass.FullName; } }

	public void Merge(DomainModelWrapper wrapper)
    {
		if(FullName != wrapper.FullName)
			throw new Exception("Cannot merge two ModelWrappers with different types");
		foreach(var pair in wrapper.MappedProperties)
        {
			if(MappedProperties.ContainsKey(pair.Key))
            {
				GlobalContainer.VSHelper.Warning(string.Format("Cannot add an existing property! Entity {0}, duplicate property {1}", FullName, pair.Key));
				continue;
            }
			MappedProperties.Add(pair.Key, pair.Value);
        }
		foreach(var relation in wrapper.RelatedModels)
        {
			if(RelatedModels.Contains(relation)) //TODO: fix this
            {
				GlobalContainer.VSHelper.Warning(string.Format("Cannot add an existing relation! Entity {0}, duplicate relation {1}", FullName, relation.RelatedModelTypeName));
				continue;
            }
			RelatedModels.Add(relation);
        }
    }


	public void Initialize()
	{
		GlobalContainer.VSHelper.SetAsPartial(CodeClass);
	    EntityType = GlobalContainer.GetEntityType(CodeClass, true);

		//Setup global relations
	    if (GlobalContainer.GlobalModelRelations.ContainsKey(FullName))
	    {
	        foreach (var globalRelation in GlobalContainer.GlobalModelRelations[FullName])
	        {
				SetupRelation(globalRelation);
	            RelatedModels.Add(globalRelation);
	        }
	    }

		//Editing properties 
		//VSHelper.Warning(CodeClass.FullName + " "+  VSHelper.GetProperties(CodeClass).Count().ToString());
		//VSHelper.Warning(CodeClass.FullName);
		foreach(CodeProperty2 prop in GlobalContainer.VSHelper.GetProperties(CodeClass))
		{
			//dont touch overrides and abstract props           
            if(prop.OverrideKind != vsCMOverrideKind.vsCMOverrideKindOverride && prop.OverrideKind != vsCMOverrideKind.vsCMOverrideKindAbstract)
			    GlobalContainer.VSHelper.SetAsVirtual(prop);

			if (!GlobalContainer.VSHelper.IsNHibernateProperty(prop) || GlobalContainer.Settings.IgnoreTypes.Contains(prop.Type.AsFullName) ||
                prop.Type.TypeKind == vsCMTypeRef.vsCMTypeRefOther) //Generic type
		        continue;
			
			if (GlobalContainer.VSHelper.IsEnumerable(prop.Type) && GlobalContainer.VSHelper.IsGeneric(prop.Type))
			{
			    var itemType = GlobalContainer.VSHelper.GetGenericAgruments(prop.Type).First();
			    if (GlobalContainer.Settings.IgnoreTypes.Contains(itemType)) continue;
			}

			MappedProperties.Add(prop.Name, prop);
			if(WasModified)
				EditMappedProperty(prop);
				
		}

	    //Define methods as virtual
		foreach(var method in GlobalContainer.VSHelper.GetMethods(CodeClass))
        {
            if(method.Access != vsCMAccess.vsCMAccessPrivate)
			    method.OverrideKind = vsCMOverrideKind.vsCMOverrideKindVirtual;
        }

		ProjectItem.Save(); //Save the item
    }

    private void SetupRelation(ModelRelation relation)
    {
		relation.Model = this;
        if (relation.Type == ModelRelationType.None) return;

        var relatedType = GlobalContainer.DomainClasses.ContainsKey(relation.RelatedModelTypeFullName)
            ? GlobalContainer.DomainClasses[relation.RelatedModelTypeFullName]
            : null; //external type
        relation.RelatedModel = relatedType;
		relation.RelatedModelEntityType = relatedType != null
				        ? GlobalContainer.GetEntityType(relatedType.CodeClass, true)
				        : GlobalContainer.Settings.GetEntityType(GlobalContainer.Settings.GetExternalType(relation.RelatedModelTypeFullName), true);
		relation.FieldName = GlobalContainer.VSHelper.GetFieldName(relation.PropertyName);
        relation.ParameterName = GlobalContainer.Singularize(GlobalContainer.VSHelper.FirstCharToLower(relation.PropertyName));
        if (!GlobalContainer.CSharpCodeProvider.IsValidIdentifier(relation.ParameterName))
            relation.ParameterName = "@" + relation.ParameterName;

        switch (relation.Type)
        {
            case ModelRelationType.OneToMany:
			case ModelRelationType.ManyToMany:
                var collectionRelation = (CollectionModelRelation) relation;
                collectionRelation.FieldCollectionType = GlobalContainer.VSHelper.GetValidNHibernteEnumerableInterface(relation.Property,
                    collectionRelation.CollectionType, GlobalContainer.Settings.Strict, relation.RelatedModelTypeName);
                if (relation.AssociationType == AssociationType.Bidirectional)
                {
                    collectionRelation.AddMethodName = "Add" + collectionRelation.SingularPropertyName;
					collectionRelation.ExistsAddMethod = GlobalContainer.VSHelper.GetMethods(CodeClass, true)
						.Any(o => o.Name == collectionRelation.AddMethodName && 
							o.Parameters.Count == 1 &&
							o.Parameters.OfType<CodeParameter>().First().Type.AsFullName == relation.RelatedModelTypeFullName);

					collectionRelation.RemoveMethodName = "Remove" + collectionRelation.SingularPropertyName;
					collectionRelation.ExistsRemoveMethod = GlobalContainer.VSHelper.GetMethods(CodeClass, true)
						.Any(o => o.Name == collectionRelation.RemoveMethodName && 
							o.Parameters.Count == 1 &&
							o.Parameters.OfType<CodeParameter>().First().Type.AsFullName == relation.RelatedModelTypeFullName);
                }
                break;

			case ModelRelationType.ManyToOne:
			case ModelRelationType.OneToOne:
				var oneRelation = (OneModelRelation) relation;
                oneRelation.SetMethodName = "Set" + relation.PropertyName;
				oneRelation.ExistsSetMethod = GlobalContainer.VSHelper.GetMethods(CodeClass, true)
						.Any(o => o.Name == oneRelation.SetMethodName && 
							o.Parameters.Count == 1 &&
							o.Parameters.OfType<CodeParameter>().First().Type.AsFullName == relation.RelatedModelTypeFullName);

				oneRelation.UnsetMethodName = "Unset" + relation.PropertyName;
				oneRelation.ExistsUnsetMethod = GlobalContainer.VSHelper.GetMethods(CodeClass, true)
						.Any(o => o.Name == oneRelation.UnsetMethodName && o.Parameters.Count == 0);

                if (relation.Type == ModelRelationType.ManyToOne)
                {
                    var manyToOne = (ManyToOneModelRelation) relation;
					if(!string.IsNullOrEmpty(relation.PathInRelatedModel))
						manyToOne.RelatedTypeRemoveMethodName = "Remove" + GlobalContainer.Singularize(relation.PathInRelatedModel);
                }
	
				if(GlobalContainer.Settings.SyntheticProperties.Generate)
				{
				    
					var syntheticPropValueType = GlobalContainer.VSHelper.IsValueType(relation.RelatedModelEntityType.IdentifierPropertyType);
					oneRelation.SyntheticPropertyTypeName = GlobalContainer.VSHelper.SimplifyTypeName(relation.RelatedModelEntityType.IdentifierPropertyType);
				    oneRelation.IsSyntheticPropertyTypeRequired =
				        relation.Property != null &&
				        GlobalContainer.VSHelper.GetAttribute(relation.Property.Attributes, GlobalContainer.Settings.NotNullAttribute) != null;
					if (!oneRelation.IsSyntheticPropertyTypeRequired && syntheticPropValueType)
						oneRelation.SyntheticPropertyTypeName += "?";
					oneRelation.SyntheticPropertyName = !string.IsNullOrEmpty(relation.KeyColumn)
						? relation.KeyColumn
						: relation.RelatedModelEntityType.KeyColumnPrefix + relation.PropertyName + relation.RelatedModelEntityType.KeyColumnPostfix;
					oneRelation.SyntheticFieldName = GlobalContainer.VSHelper.GetFieldName(oneRelation.SyntheticPropertyName);
					oneRelation.SyntheticPropertyMaxLength = relation.RelatedModelEntityType.GetIdentifierLength(relation.RelatedModelTypeFullName);
				    oneRelation.GenerateSyntheticProperty =
				        GlobalContainer.VSHelper.GetInheritedProperties((CodeType) CodeClass)
				            .All(o => o.Name != oneRelation.SyntheticPropertyName); //Check if is already defined
				}
                break;
        }
    }

    private ModelRelation GetRelation(CodeProperty2 prop)
	{
	    if (GlobalContainer.Overrides.ContainsKey(FullName) && GlobalContainer.Overrides[FullName].ContainsKey(prop.Name))
	        return GlobalContainer.Overrides[FullName][prop.Name];

	    var one = !(GlobalContainer.VSHelper.IsEnumerable(prop.Type) && GlobalContainer.VSHelper.IsGeneric(prop.Type));
        var typeFullName = one
            ? prop.Type.CodeType.FullName
            : GlobalContainer.VSHelper.GetGenericAgruments(prop.Type).First();

	    var externalType = GlobalContainer.Settings.IsExternalType(typeFullName);

        //External type cannot have a bidirectional association
	    if (!externalType)
	    {
	        if(!GlobalContainer.ProjectTypes.ContainsKey(typeFullName))
		    { 
			    GlobalContainer.VSHelper.Warning(String.Format("Type {0} does not exists in the current project", typeFullName));
		        return new NoneModelRelation();
		    }
            //Skip further processing if the related type is not an entity
	        if (!GlobalContainer.ProjectTypes[typeFullName].Any(o => o.IsDerivedFrom[GlobalContainer.Settings.BaseEntityType]))
	        {
	            return new NoneModelRelation();
	        }

            //Check for Bidirectional association
		    foreach(var cls in GlobalContainer.ProjectTypes[typeFullName])
            {
			    foreach(var p in GlobalContainer.VSHelper.GetProperties(cls, true))
                {
				    if(GlobalContainer.VSHelper.IsEnumerable(p.Type) && 
						GlobalContainer.VSHelper.IsGeneric(p.Type) && 
						GlobalContainer.VSHelper.GetGenericAgruments(p.Type).First() == FullName && 
						prop.Name == cls.Name) //generic collection
				    {
				        //VSHelper.Warning(cls.Name +  " " + p.Name  + " " + typeFullName + " " + (one ?  "OM" : "MM"));
                        if (one)
                        {
                            return new ManyToOneModelRelation
                            {
                                RelatedModelTypeFullName = typeFullName,
                                Property = prop,
                                PathInRelatedModel = p.Name,
                                AssociationType = AssociationType.Bidirectional
                            };
                        }
				        return new ManyToManyModelRelation
				        {
				            RelatedModelTypeFullName = typeFullName,
				            CollectionType = GlobalContainer.VSHelper.GetPropertyType(prop),
				            Property = prop,
				            PathInRelatedModel = p.Name,
				            AssociationType = AssociationType.Bidirectional
				        };
				    }
                    if (p.Type.AsFullName != FullName) continue;
                    if (one && 
                        (
                            //by default convention one to one is not generated
                            GlobalContainer.VSHelper.GetAttribute(prop.Attributes, "T4FluentNH.Attributes.AsOneToOneAttribute") == null ||
                            //property must be the same when one to one is defined on the same type
                            (typeFullName == FullName && p.Name != prop.Name)
                        )
                    )
                    {
                        continue;
                    }

                    if (one)
                    {
                        return new OneToOneModelRelation
                        {
                            RelatedModelTypeFullName = typeFullName,
                            Property = prop,
                            PathInRelatedModel = p.Name,
                            AssociationType = AssociationType.Bidirectional
                        };
                    }

                    //VSHelper.Warning(cls.Name +  " " + p.Name  + " " + typeFullName + " " + (one ?  "OO" : "MO"));
                    return new OneToManyModelRelation
                    {
                        RelatedModelTypeFullName = typeFullName,
                        CollectionType = GlobalContainer.VSHelper.GetPropertyType(prop),
                        Property = prop,
                        PathInRelatedModel = p.Name,
                        AssociationType = AssociationType.Bidirectional
                    };
                }
            }
	    }


        //Unidirectional association - By default unidirectional associations are oneToMany and manyToOne
		//VSHelper.Warning(typeFullName +  " " + prop.Name  + " " + (one ?  "MO" : "MM"));
        //manyToOne
	    if (one)
	    {
	        return new ManyToOneModelRelation
	        {
	            RelatedModelTypeFullName = typeFullName,
	            Property = prop,
	            PathInRelatedModel = null,
	            AssociationType = AssociationType.Unidirectional
	        };
	    }

        //oneToMany - in this case we have to add two relations for both sides
		/*
	    AddGlobalModelRelation(typeFullName, new ModelRelation
	    {
	        Type = ModelRelationType.ManyToOne,
	        RelatedModelType = FullName,
	        ListType = null,
	        Property = null,
	        PathInRelatedModel = prop.Name,
	        AssociationType = AssociationType.Unidirectional
	    });*/

	    return new OneToManyModelRelation
	    {
	        RelatedModelTypeFullName = typeFullName,
	        CollectionType = GlobalContainer.VSHelper.GetPropertyType(prop),
	        Property = prop,
	        PathInRelatedModel = null,
	        AssociationType = AssociationType.Unidirectional
	    };
	}

    private void EditMappedManyRelation(CodeProperty2 prop, CollectionModelRelation relation)
    {
		//Gtt.Warning(string.Format("{0} - {1} = {2}", FullName, listType, relation));
        GlobalContainer.VSHelper.SetAsPublic(prop);
		var listImplType = GlobalContainer.VSHelper.GetEnumerableImplType(prop);
		if (listImplType == null)
		{
		    var colMapType = relation.CollectionMapType;
		    if (colMapType == CollectionMapType.Unknown)
		    {
		        GlobalContainer.VSHelper.Warning(string.Format("CollectionMapType is not set for property '{0}' in class '{1}'",
		            prop.Name, Name));
		        colMapType = GlobalContainer.Settings.DefaultCollectionMapType;
		    }
		    switch (colMapType)
		    {
		        case CollectionMapType.Set:
		        case CollectionMapType.Bag:
		            listImplType = "HashSet";
		            break;
		        case CollectionMapType.List:
		            listImplType = "List";
		            break;
		    }
		}

		var newType = GlobalContainer.VSHelper.GetValidNHibernteEnumerableInterface(prop, listImplType, GlobalContainer.Settings.Strict);
		GlobalContainer.VSHelper.SetPropertyType(prop, newType);
		var body = string.Format(@"
		{{
			{0}
			{1}
		}}",
		string.Format("get {{ return {0} ?? ({0} = new {1}<{2}>()); }}", GlobalContainer.VSHelper.GetFieldName(prop.Name),
		        listImplType, GlobalContainer.VSHelper.GetClassName(relation.RelatedModelTypeFullName)),
		string.Format("{0}set {{ {1} = value; }}", GlobalContainer.Settings.Strict ? "protected " : "",
		        GlobalContainer.VSHelper.GetFieldName(prop.Name)));
		GlobalContainer.VSHelper.SetPropertyBody(prop, body);	
    }

    private void EditMappedOneRelation(CodeProperty2 prop, OneModelRelation relation)
    {
        if (relation.GenerateSyntheticProperty)
        {
            var set = string.Format("{2}set {{ SetField(ref {0}, value, ref {1}); }}", relation.FieldName,
                relation.SyntheticFieldName,
                (GlobalContainer.Settings.Strict ? "protected internal " : ""));
            GlobalContainer.VSHelper.SetSetter(prop, set);
            GlobalContainer.VSHelper.SetGetter(prop, string.Format("get {{ return {0}; }}", relation.FieldName));
        }
        else
        {
            GlobalContainer.VSHelper.SetSetter(prop, GlobalContainer.Settings.Strict ? "protected internal set;" : "set;");
        }
    }

    private void EditMappedComponent(CodeProperty2 prop)
    {
	    var body = string.Format(@"
		{{
			{0}
			{1}
		}}", string.Format("get {{ return {0} ?? ({0} = new {1}()); }}", GlobalContainer.VSHelper.GetFieldName(prop.Name), prop.Type.CodeType.Name),
			string.Format("{0}set {{ {1} = value; }}", GlobalContainer.Settings.Strict ? "protected " : "", GlobalContainer.VSHelper.GetFieldName(prop.Name)));
        GlobalContainer.VSHelper.SetPropertyBody(prop, body);
    }

	private void EditMappedProperty(CodeProperty2 prop)
    {
        var relation = GetRelation(prop);
		SetupRelation(relation);
	    if (relation.Type != ModelRelationType.None)
	    {
	        var colleactionRelaton = relation as CollectionModelRelation;
	        if(colleactionRelaton != null)
	            EditMappedManyRelation(prop, colleactionRelaton);
	        
			var oneRelation = relation as OneModelRelation;
			if(oneRelation != null)
				EditMappedOneRelation(prop, oneRelation);

			RelatedModels.Add(relation);
	    }

        //Component
	    if (GlobalContainer.Components.ContainsKey(FullName) && GlobalContainer.Components[FullName].ContainsKey(prop.Name))
	    {
	        EditMappedComponent(prop);
	    }
    }
}




#>
<#+

    public class EntityType
    {
        public string DerivedFromType { get; set; }

        public string KeyColumnPrefix { get; set; }

        public string KeyColumnPostfix { get; set; }

        public string IdentifierPropertyType { get; set; }

		public string IdentifierPropertyName { get; set; }

        public string IdentifierLength { get; set; }

        public Dictionary<string,string> CustomIdentifierLengths { get; set; }

        public string GetIdentifierLength(string typeFullName)
        {
            if (CustomIdentifierLengths.ContainsKey(typeFullName))
                return CustomIdentifierLengths[typeFullName];
            return IdentifierLength;
        }
    }

    public class ExternalType
    {
        public string FullName { get; set; }

        public string DerivedFromType { get; set; }

    }

	public class Singularize
    {
        public string Pattern { get; set; }

        public string Replace { get; set; }

    }

    public class SyntheticProperties
    {
        public bool Generate { get; set; }

        public string Comment { get; set; }

        public bool AddNotNullAttribute { get; set; }

        public bool AddLengthAttribute { get; set; }

        public List<string> CustomAttributes { get; set; } 
    }

    public class XmlSettings
    {
        public static XmlSettings Load(string path)
        {
            if(!File.Exists(path))
                throw new FileNotFoundException(string.Format("Missing settings at: '{0}'", path));

            var xElement = XElement.Load(path);
            
            var settings = new XmlSettings
            {
                BaseEntityType = xElement.XPathSelectElement("/BaseEntityType").Value,
                Strict = xElement.XPathSelectElement("/Strict").Value.ToUpperInvariant() == "TRUE",
                DefaultCollectionMapType = (CollectionMapType)Enum.Parse(typeof(CollectionMapType), xElement.XPathSelectElement("/DefaultCollectionMapType").Value, true),
                SyntheticProperties = new SyntheticProperties
                {
                  AddLengthAttribute  = xElement.XPathSelectElement("/SyntheticProperties/AddLengthAttribute").Value.ToUpperInvariant() == "TRUE",
                  AddNotNullAttribute = xElement.XPathSelectElement("/SyntheticProperties/AddNotNullAttribute").Value.ToUpperInvariant() == "TRUE",
                  Comment = xElement.XPathSelectElement("/SyntheticProperties/Comment").Value,
                  Generate = xElement.XPathSelectElement("/SyntheticProperties/Generate").Value.ToUpperInvariant() == "TRUE",
                  CustomAttributes = xElement.XPathSelectElements("SyntheticProperties/CustomAttributes//CustomAttribute")
                    .Select(o => o.Value).ToList()
                },
                EntityTypes = xElement.XPathSelectElements("/EntityTypes//EntityType")
                .Select(o => new EntityType
                {
                    DerivedFromType = o.XPathSelectElement("DerivedFromType").Value,
                    KeyColumnPrefix = o.XPathSelectElement("KeyColumn/Prefix").Value,
                    KeyColumnPostfix = o.XPathSelectElement("KeyColumn/Postfix").Value,
                    IdentifierPropertyType = o.XPathSelectElement("IdentifierPropertyType").Value,
					IdentifierPropertyName = o.XPathSelectElement("IdentifierPropertyName").Value,
                    IdentifierLength = o.XPathSelectElement("IdentifierLength") != null 
                        ? o.XPathSelectElement("IdentifierLength").Value
                        : null,
                    CustomIdentifierLengths = o.XPathSelectElements("CustomIdentifierLengths//CustomIdentifierLength").Any()
                        ? o.XPathSelectElements("CustomIdentifierLengths//CustomIdentifierLength")
                            .ToDictionary(c => c.XPathSelectElement("Type").Value, c => c.XPathSelectElement("Length").Value)
                        : new Dictionary<string,string>()
                }).ToList(),
                ExternalTypes = new List<ExternalType>(xElement.XPathSelectElements("/ExternalTypes//ExternalType")
                    .Select(o => new ExternalType
                    {
                        DerivedFromType = o.XPathSelectElement("DerivedFromType").Value,
                        FullName = o.XPathSelectElement("FullName").Value,
                    })),
				Singularization = new List<Singularize>(xElement.XPathSelectElements("/Singularization//Singularize")
                    .Select(o => new Singularize
                    {
                        Pattern = o.XPathSelectElement("Pattern").Value,
                        Replace = o.XPathSelectElement("Replace").Value,
                    })),
                IgnoreTypes = new HashSet<string>(xElement.XPathSelectElements("/IgnoreTypes//IgnoreType").Select(o => o.Value)),
                NotNullAttribute = xElement.XPathSelectElement("/NotNullAttribute").Value,
                LengthAttribute = xElement.XPathSelectElement("/LengthAttribute").Value,
            };
            if(string.IsNullOrEmpty(settings.BaseEntityType))
                throw new Exception("BaseEntityType is not set");
            return settings;
        }

        public List<EntityType> EntityTypes { get; set; }

        public EntityType GetEntityType(VisualStudioHelper vsHelper, CodeClass2 codeClass, bool throwIfNotFound)
        {
            var eType = EntityTypes.FirstOrDefault(o => codeClass.IsDerivedFrom[o.DerivedFromType] || vsHelper.ContainBaseType(codeClass, o.DerivedFromType));
            if(eType == null && throwIfNotFound)
                throw new Exception("EntityType for type " + codeClass.FullName + " does not exists");
            return eType;
        }

        public EntityType GetEntityType(ExternalType externalType, bool throwIfNotFound)
        {
            var eType = EntityTypes.FirstOrDefault(o => o.DerivedFromType == externalType.DerivedFromType);
            if(eType == null && throwIfNotFound)
                throw new Exception("EntityType that derives from type " + externalType.DerivedFromType + " does not exists");
            return eType;
        }

        public bool IsExternalType(string typeFullName)
        {
            return ExternalTypes.Any(o => o.FullName == typeFullName);
        }

        public ExternalType GetExternalType(string typeFullName)
        {
            return ExternalTypes.FirstOrDefault(o => o.FullName == typeFullName);
        }

        public string NotNullAttribute { get; set; }

        public string LengthAttribute { get; set; }
        
        public HashSet<string> IgnoreTypes { get; set; }

        public List<ExternalType> ExternalTypes { get; set; }

		public List<Singularize> Singularization { get; set; }

        public string BaseEntityType { get; set; }

        public CollectionMapType DefaultCollectionMapType { get; set; }

        public bool Strict { get; set; }

        public SyntheticProperties SyntheticProperties { get; set; }

        

    }


#>


<#+

public VisualStudioHelper VSHelper;

public class VisualStudioHelper : AutomationHelper
{
	private PluralizationService PluralizationService;
	private GeneratedTextTransformation Gtt;

	public VisualStudioHelper(GeneratedTextTransformation gtt) : base(gtt.Host)
	{
		Gtt = gtt;
		PluralizationService = PluralizationService.CreateService(CultureInfo.CreateSpecificCulture("en"));
	}

	public void Warning(string message)
    {
		Gtt.Warning(message);
    }

	public Dictionary<string, List<CodeClass2>> GetAllTypes(IEnumerable<ProjectItem> projectItems)
	{
		var result = new Dictionary<string, List<CodeClass2>>();
		foreach(ProjectItem item in projectItems)
		{
			ProcessTypes(item, (cls, pItem) => 
				{
					if(!result.ContainsKey(cls.FullName))
						result.Add(cls.FullName, new List<CodeClass2>());
					result[cls.FullName].Add(cls);
				});
		}
		return result;
	} 

	/// <summary>
    /// Provides access to the hosts solution startup project.
    /// </summary>
    public Project StartUpProject 
    {
        get
        {
            var startupProjectName = ((Array)DTE.Solution.SolutionBuild.StartupProjects).GetValue(0).ToString();
			
            var projects = GetAllProjects();
 
            foreach (var project in projects)
            {
                // returns object typeof(Project), not just project name
                if (project.UniqueName == startupProjectName)
                return project;
            }
            return null;
        }
    }

	/// <summary>
    /// Provides access to the application/web configuration file.
    /// </summary>
    /// <remarks>
    /// http://msdn.microsoft.com/en-us/library/system.configuration.configuration.aspx
    /// </remarks>
    public System.Configuration.Configuration Configuration(Project project)
    {
        string configurationFilename = null;
        foreach (ProjectItem item in project.ProjectItems)
        {
            if (!Regex.IsMatch(item.Name, "(app|web).config", RegexOptions.IgnoreCase)) 
                continue;
            configurationFilename = item.FileNames[0];
            break;
        }
 
        if(!string.IsNullOrEmpty(configurationFilename))
        {
            var configFile = new ExeConfigurationFileMap {ExeConfigFilename = configurationFilename};
            return System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(configFile, ConfigurationUserLevel.None);
        }
    	return null;
    }

	public Project GetProjectContainingT4File()
	{
		// Fail if we couldn't get the DTE. This can happen when trying to run in TextTransform.exe
		if (DTE == null)
		{
			throw new Exception("T4 can only execute through the Visual Studio host");
		}
		// Find the .tt file's ProjectItem
		ProjectItem projectItem = DTE.Solution.FindProjectItem(Host.TemplateFile);

		// If the .tt file is not opened, open it
		if (projectItem.Document == null)
			projectItem.Open(Constants.vsViewKindCode);

		return projectItem.ContainingProject;
	}

	public string Pluralize(string name)
	{
		return PluralizationService.Pluralize(name);
	}

	public string Singularize(string name)
	{
		return PluralizationService.Singularize(name);
	}

    public List<CodeProperty2> GetInheritedProperties(CodeType element)
    {
        // If it's a local code element, we may be able to enumerate all its partial classes
        if (element.InfoLocation == vsCMInfoLocation.vsCMInfoLocationProject)
        {
            var codeClass2 = element as CodeClass2;
            if (codeClass2 != null)
            {
                var memberDict = new Dictionary<string, CodeElement>();
                foreach (var partialClass in codeClass2.PartialClasses.OfType<CodeType>())
                {
                    if (GetAttribute(partialClass.Attributes, "System.CodeDom.Compiler.GeneratedCodeAttribute") != null)
                        continue;
                    var baseMembers = partialClass.Bases.OfType<CodeType>().SelectMany(x => VisibleMembers(x).OfType<CodeElement>());
                    
                    // Ensure we only have one entry per name from all the bases
                    foreach (var baseMember in baseMembers) {
                        memberDict[baseMember.Name] = baseMember;
                    }
                }
                return memberDict.Values.OfType<CodeProperty2>().ToList();
            }
        }
        return new List<CodeProperty2>();
    }

    /// <summary>
    /// Finds a visible property matching any one of a set of possible names. The names are considered in
    /// priority order, with earlier entries in the array taking higher priority.
    /// </summary>
    public CodeProperty FindProperty(CodeType codeType, params string[] namesToMatch)
    {
        var candidateProperties = VisibleMembers(codeType).OfType<CodeProperty>().ToList();
        var comparison = vsProjectType.VisualBasicCodeModelLanguage.Equals(codeType.Language, StringComparison.OrdinalIgnoreCase)
                                ? StringComparison.OrdinalIgnoreCase // VB
                                : StringComparison.Ordinal;          // C#
        foreach (var name in namesToMatch) {
            var matchingProperty = candidateProperties.FirstOrDefault(x => string.Equals(x.Name, name, comparison));
            if (matchingProperty != null)
                return matchingProperty;
        }
        return null;
    }

    /// <summary>
    /// Scans all partial classes and all base types to get a list of all the
    /// members exposed by a type
    /// </summary>
    public CodeElements VisibleMembers(CodeType element)
    {
        if (element == null) throw new ArgumentNullException("element");

        // If it's a local code element, we may be able to enumerate all its partial classes
        if (element.InfoLocation == vsCMInfoLocation.vsCMInfoLocationProject)
        {
            var codeClass2 = element as CodeClass2;
            if (codeClass2 != null)
            {
                var partialsCodeElements = new List<CodeElement>();
                var isFirstPartialClass = true;
                foreach (var partialClass in codeClass2.PartialClasses.OfType<CodeType>()) {
                    partialsCodeElements.AddRange(VisibleMembersIgnorePartials(partialClass, includeBaseMembers: isFirstPartialClass).OfType<CodeElement>());
                    isFirstPartialClass = false; // Only scan base types once per partial class set, otherwise we'll get duplicates of the bases
                }
                return new ConcreteCodeElements(element, partialsCodeElements);
            }
        }

        return VisibleMembersIgnorePartials(element, true);
    }

    public CodeElements VisibleMembersIgnorePartials(CodeType element, bool includeBaseMembers)
    {
        var baseMembers = includeBaseMembers
                                ? element.Bases.OfType<CodeType>().SelectMany(x => VisibleMembers(x).OfType<CodeElement>())
                                : Enumerable.Empty<CodeElement>();

        var nameComparer = string.Equals(element.Language, vsProjectType.VisualBasicCodeModelLanguage, StringComparison.OrdinalIgnoreCase)
                                ? StringComparer.OrdinalIgnoreCase // VB has case-insensitive identifiers
                                : StringComparer.Ordinal;          // Supported other languages (C#) don't

        // Ensure we only have one entry per name from all the bases
        var memberDict = new Dictionary<string, CodeElement>(nameComparer);
        foreach (var baseMember in baseMembers) {
            memberDict[baseMember.Name] = baseMember;
        }

        // Now overlay members at this level
        foreach (var codeElement in element.Members.OfType<CodeElement>()) {
            if (IsPublic(codeElement))
                memberDict[codeElement.Name] = codeElement;
        }

        return new ConcreteCodeElements(element, memberDict.Values);
    }

    public bool IsPublic(CodeElement codeElement)
    {
        if (codeElement is CodeType)
            return ((CodeType)codeElement).Access == vsCMAccess.vsCMAccessPublic;
        if (codeElement is CodeProperty)
            return ((CodeProperty)codeElement).Access == vsCMAccess.vsCMAccessPublic;
        if (codeElement is CodeFunction)
            return ((CodeFunction)codeElement).Access == vsCMAccess.vsCMAccessPublic;
        if (codeElement is CodeVariable)
            return ((CodeVariable)codeElement).Access == vsCMAccess.vsCMAccessPublic;
        if (codeElement is CodeStruct)
            return ((CodeStruct)codeElement).Access == vsCMAccess.vsCMAccessPublic;
        if (codeElement is CodeDelegate)
            return ((CodeDelegate)codeElement).Access == vsCMAccess.vsCMAccessPublic;
        return false;
    }

	public string GetValidNHibernteEnumerableInterface(CodeProperty2 prop, string listImplType, bool strict, string newItemType = null) 
	{
		var typeName = GetPropertyType(prop);
	    //if (typeName.Contains("IEnumerable"))
	     //   typeName = typeName.Replace("IEnumerable", listImplType);
	    if (!string.IsNullOrEmpty(newItemType))
	    {
	        typeName = Regex.Replace(typeName, "<([^.]+)>", "<" + newItemType + ">");
	    }
         

	    if (typeName.Contains("IEnumerable"))
	        return typeName;

	    if (typeName.Contains("HashSet") || typeName.Contains("ISet"))
	        return Regex.Replace(typeName, @"(?:HashSet|PersistentGenericSet)", strict ? "IEnumerable" : "ISet");
	    if (typeName.Contains("List") || typeName.Contains("IList"))
	        return Regex.Replace(typeName, @"(?:IList|List)", strict ? "IEnumerable" : "IList");
		if(typeName.Contains("Collection") || typeName.Contains("ICollection")) 
			return Regex.Replace(typeName, @"(?:ICollection|Collection)", strict ? "IEnumerable" : "ICollection");

		throw new Exception(string.Format("Type {0} is not enumerable", typeName));
	}

	public string GetEnumerableImplType(CodeProperty2 prop)
	{
	    var type = prop.Type;
		var typeName = type.CodeType.Name;
		if(new []{"List", "HashSet", "Collection"}.Contains(typeName)) return typeName;
		var baseTypes = GetBaseTypes(type).Select(o => o.Name).ToList();
		if(typeName == "ISet" || baseTypes.Contains("ISet") || GetAttribute(prop.Attributes, "FluentNHibernate.T4.Attributes.AsSetAttribute") != null) 
            return "HashSet";
		if(typeName == "IList" || baseTypes.Contains("IList")) return "List";
        if(typeName == "ICollection" || baseTypes.Contains("ICollection")) return "List";
	    if (typeName == "IEnumerable") return null;
		throw new Exception(string.Format("Type {0} is not enumerable", type.CodeType.Name));
	}

	public string GetClassName(string fullname)
	{
		return fullname.Split('.').Last();
	}

	public string GetClassNamespace(string fullname)
	{
		var arr = fullname.Split('.');
		return string.Join(".", arr.Take(arr.Length-1));
	}

	public string GetFieldName(string name)
	{
		return string.Format("_{0}", FirstCharToLower(name));
	}

	public string FirstCharToLower(string str)
	{
		return Char.ToLowerInvariant(str[0]) + str.Substring(1);
	}

	public bool IsSimpleOrNullableType(CodeTypeRef codeTypeRef)
    {
		var type = Type.GetType(codeTypeRef.AsFullName);
		if(type == null) return false; //External type
        return
            type.IsPrimitive ||
            type == typeof (Decimal) ||
            type == typeof (String) ||
            type == typeof (DateTime) ||
            type == typeof (TimeSpan) ||
            type == typeof (DateTimeOffset) ||
            IsNullable(type);
    }

    public bool IsValueType(string typeFullName)
    {
        var type = Type.GetType(typeFullName);
	    if(type == null) return false; //External type
        return type.IsValueType;
    }

    public string SimplifyTypeName(string typeFullName)
    {
        switch (typeFullName)
        {
            case "System.Int16":
                return "short";
            case "System.Int32":
                return "int";
            case "System.Int64":
                return "long";
            case "System.String":
                return "string";
            case "System.Decimal":
                return "decimal";
            default:
                return typeFullName;
        }
    }

    public bool IsSimpleType(string typeFullName)
    {
        var type = Type.GetType(typeFullName);
		if(type == null) return false; //External type
        return
            type.IsPrimitive ||
            type == typeof (Decimal) ||
            type == typeof (String) ||
            type == typeof (DateTime) ||
            type == typeof (TimeSpan) ||
            type == typeof (DateTimeOffset);
    }

    public bool IsSimpleType(CodeTypeRef codeTypeRef)
    {
        return IsSimpleType(codeTypeRef.AsFullName);
    }

    public bool IsNullable(CodeTypeRef codeTypeRef)
    {
		var type = Type.GetType(codeTypeRef.AsFullName);
        return Nullable.GetUnderlyingType(type) != null;
    }

	public string FirstCharToUpper(string input)
	{
		if (String.IsNullOrEmpty(input))
			throw new ArgumentException("ARGH!");
		return input.First().ToString().ToUpper() + String.Join("", input.Skip(1));
	}

	public bool IsEnumerable(CodeTypeRef type) //not working for dict
	{
		if(type.TypeKind == vsCMTypeRef.vsCMTypeRefOther)
		{
			throw new Exception(string.Format("Can not evaluate type {0}", type.AsFullName));
			//return false;
		}
		var baseTypes = GetBaseTypes(type).Select(o => o.Name).ToList();
		baseTypes.Add(type.CodeType.Name);
		return 
			baseTypes.Contains("IEnumerable") || 
			baseTypes.Contains("HashSet") ||
			baseTypes.Contains("Collection") ||
			baseTypes.Contains("List"); 
	}

    public string Trim(string str, string prefix, string postfix)
    {
        return TrimEnd(TrimStart(str, prefix), postfix);
    }

    public string TrimEnd(string str, string trim)
    {
        if (string.IsNullOrEmpty(str)) return str;
        return (str.EndsWith(trim))
            ? str.Substring(0, str.Length - trim.Length)
            : str;
    }

    public string TrimStart(string str, string trim)
    {
        if (string.IsNullOrEmpty(str)) return str;
        return (str.StartsWith(trim))
            ? str.Substring(trim.Length, str.Length - trim.Length)
            : str;
    }

	public List<CodeElement> GetBaseTypes(CodeTypeRef type)
	{
		var result = new List<CodeElement>();
		if(type.TypeKind == vsCMTypeRef.vsCMTypeRefOther)
		{
			//Warning(string.Format("Can not get base types for type {0}", type.AsFullName));
			return result;
		}
        
		for(var i=1; i <= (type.CodeType.Bases.Count); i++)
		{
			result.Add(type.CodeType.Bases.Item(i));
		}
		return result;
	}

	public List<string> GetBaseTypeNames(CodeClass2 cls)
	{
		var result = new List<string>();
		for(var i=1; i <= (cls.Bases.Count); i++)
		{
			result.Add(cls.Bases.Item(i).Name);
		}
		return result;
	}

	public bool IsController(CodeClass2 type)
	{
		// Ignore any class which name doesn't end with "Controller"
		if (!type.FullName.EndsWith("Controller")) return false;

		for (; type.FullName != "System.Web.Mvc.Controller"; type = (CodeClass2)type.Bases.Item(1))
		{
			if (type.Bases.Count == 0)
				return false;
		}
		return true;
	}

	public bool IsGeneric(CodeTypeRef type)
	{
		return GetGenericAgruments(type).Any();
	}

	public List<string> GetGenericAgruments(CodeTypeRef type)
	{
		var result = new List<string>();
		if(type.TypeKind == vsCMTypeRef.vsCMTypeRefOther)
		{
			//Warning(string.Format("Can not get generic arguments for type {0}", type.AsFullName));
			return result;
		}
		return GetGenericAgruments(type.CodeType.FullName);
		
	}

	public List<string> GetGenericAgruments(string fullName)
	{
		var result = new List<string>();
		var genArgs = fullName.Split('<', '>');
		if(genArgs.Length <= 1) return result;
		foreach(var arg in genArgs[1].Split(','))
		{
			result.Add(arg);
		}
		return result;
    }

	public bool IsProtectedInternal(vsCMAccess access)
	{
		return access == vsCMAccess.vsCMAccessProjectOrProtected && 
			(access != vsCMAccess.vsCMAccessProtected && access != vsCMAccess.vsCMAccessProject);
	}

	public bool IsNHibernateProperty(CodeProperty2 prop)
    {
		return (IsProtectedInternal(prop.Access) || prop.Access == vsCMAccess.vsCMAccessPublic) && prop.Setter != null;
    }

	public void SetAsProtectedInternal(CodeProperty2 prop)
	{
		prop.Access = vsCMAccess.vsCMAccessProjectOrProtected;
	}

	public void SetAsPublic(CodeProperty2 prop)
	{
		prop.Access = vsCMAccess.vsCMAccessPublic;
	}

	public void SetAsPartial(CodeClass2 type)
	{
		if (type.ClassKind != vsCMClassKind.vsCMClassKindPartialClass)
		{
			try
			{
				type.ClassKind = vsCMClassKind.vsCMClassKindPartialClass;
			}
			catch
			{
				//Warning("SetAsPartial");
				return;
			}
			//Warning(String.Format("{0} changed the class {1} to be partial", T4FileName, type.Name));
		}
	}

	public void SetSetter(CodeProperty2 prop, string text)
	{
		SetCodeFunctionText(prop.Setter, text);
	}

	public void SetGetter(CodeProperty2 prop, string text)
	{
		SetCodeFunctionText(prop.Getter, text);
	}

	public void SetAsVirtual(CodeProperty2 prop)
	{
	    if (prop.OverrideKind == vsCMOverrideKind.vsCMOverrideKindVirtual || prop.Access == vsCMAccess.vsCMAccessPrivate) return;
	    var getterText = GetCodeFunctionText(prop.Getter);
	    var setterText = prop.Setter != null ? GetCodeFunctionText(prop.Setter) : null;
	    prop.OverrideKind = vsCMOverrideKind.vsCMOverrideKindVirtual; //bug with auto-properties
	    SetCodeFunctionText(prop.Getter, getterText);
	    if(setterText == null) return;
	    SetCodeFunctionText(prop.Setter, setterText);
	}

	public string GetPropertyType(CodeProperty2 prop)
	{
		var codeStart = prop.StartPoint.CreateEditPoint();
		var codeFinish = prop.EndPoint;
		var functionText = codeStart.GetText(codeFinish);
		var match = Regex.Match(functionText, string.Format(@"([public\s|private\s|protected\s|internal\s|virtual\s|static\s]+)(.+?(?= {0}))", prop.Name));
		if (!match.Success || match.Groups.Count < 3) 
			throw new Exception("Failed to get property type for property " + prop.Name);
		return match.Groups[2].Value;
	}

	public void SetPropertyType(CodeProperty2 prop, string type)
	{
		var codeStart = prop.StartPoint.CreateEditPoint();
		var codeFinish = prop.EndPoint;
		var functionText = codeStart.GetText(codeFinish);
		var currentType = GetPropertyType(prop);
		codeStart.ReplaceText(codeFinish.CreateEditPoint(), functionText.Replace(currentType, type), (int)vsEPReplaceTextOptions.vsEPReplaceTextAutoformat);
	}

	public void SetPropertyBody(CodeProperty2 prop, string body)
	{
		var codeStart = prop.StartPoint.CreateEditPoint();
		var codeFinish = prop.EndPoint;
		var functionText = codeStart.GetText(codeFinish);
		functionText = functionText.Substring(0, functionText.IndexOf('{')-1) + body;
		var currentType = GetPropertyType(prop);
		codeStart.ReplaceText(codeFinish.CreateEditPoint(), functionText, (int)vsEPReplaceTextOptions.vsEPReplaceTextAutoformat);
	}

	public string GetCodeFunctionText(CodeFunction codeFunction)
	{
		var codeStart = codeFunction.StartPoint;
		var codeFinish = codeFunction.EndPoint;
		return codeStart.CreateEditPoint().GetText(codeFinish);
	}

	public void SetCodeFunctionText(CodeFunction codeFunction, string text)
	{
		var codeStart = codeFunction.StartPoint;
		var codeFinish = codeFunction.EndPoint;
		var editPoint = codeStart.CreateEditPoint();
		editPoint.Delete(codeFinish);
		editPoint.Insert(text);
	}


	public bool ContainBaseType(CodeClass2 type, string baseType)
	{
		for (; type.FullName != baseType; type = (CodeClass2)type.Bases.Item(1))
		{
			if (type.Bases.Count == 0)
				return false;
		}
		return true;
	}

	// Check if the class has any explicit constructor
	public bool HasExplicitConstructor(CodeClass2 codeClass)
	{
		return codeClass.Members.OfType<CodeFunction2>().Any(
			f => !f.IsShared && f.FunctionKind == vsCMFunction.vsCMFunctionConstructor);
	}

	// Check if the class has a default (i.e. no params) constructor
	public bool HasExplicitDefaultConstructor(CodeClass2 codeClass)
	{
		return codeClass.Members.OfType<CodeFunction2>().Any(
			f => !f.IsShared && f.FunctionKind == vsCMFunction.vsCMFunctionConstructor && f.Parameters.Count == 0);
	}

    public IEnumerable<CodeProperty2> GetProperties(IEnumerable<CodeClass2> codeClasses)
    {
        var props = new List<CodeProperty2>();
        foreach (var codeClass in codeClasses)
        {
            props.AddRange(GetProperties(codeClass));
        }
        return props;
    }

    public IEnumerable<CodeProperty2> GetProperties(CodeClass2 codeClass, bool includeInherited = false)
	{
		// Only look at regular method (e.g. ignore things like contructors)
		var props = codeClass.Members.OfType<CodeProperty2>();
        if (includeInherited)
        {
            props = props.Union(GetInheritedProperties((CodeType) codeClass));
        }
        return props;
	}

	public IEnumerable<CodeFunction2> GetMethods(CodeClass2 codeClass, bool includeInherited = false)
	{
		// Only look at regular method (e.g. ignore things like contructors)
		var methods = codeClass.Members.OfType<CodeFunction2>()
			.Where(f => f.FunctionKind == vsCMFunction.vsCMFunctionFunction);
	    if (includeInherited)
	        methods = methods.Union(GetInheritedMethods((CodeType) codeClass));
	    return methods;
	}

	public IEnumerable<CodeFunction2> GetInheritedMethods(CodeType element)
    {
        // If it's a local code element, we may be able to enumerate all its partial classes
        if (element.InfoLocation == vsCMInfoLocation.vsCMInfoLocationProject)
        {
            var codeClass2 = element as CodeClass2;
            if (codeClass2 != null)
            {
                var memberDict = new Dictionary<string, CodeElement>();
                foreach (var partialClass in codeClass2.PartialClasses.OfType<CodeType>())
                {
                    if (GetAttribute(partialClass.Attributes, "System.CodeDom.Compiler.GeneratedCodeAttribute") != null)
                        continue;
                    var baseMembers = partialClass.Bases.OfType<CodeType>().SelectMany(x => VisibleMembers(x).OfType<CodeElement>());
                    
                    // Ensure we only have one entry per name from all the bases
                    foreach (var baseMember in baseMembers) {
                        memberDict[baseMember.Name] = baseMember;
                    }
                }
                return memberDict.Values.OfType<CodeFunction2>();
            }
        }
        return new List<CodeFunction2>();
    }

	public IEnumerable<CodeFunction2> GetActionResultMethods(CodeClass2 codeClass)
	{
		var methods = new List<CodeFunction2>();
		foreach (CodeFunction2 method in GetMethods(codeClass))
        {
            // Ignore non-public methods
            if (method.Access != vsCMAccess.vsCMAccessPublic)
                continue;

            // Ignore methods that are marked as not being actions
            if (GetAttribute(method.Attributes, "System.Web.Mvc.NonActionAttribute") != null)
                continue;

            // Ignore methods that are marked as Obsolete
            if (GetAttribute(method.Attributes, "System.ObsoleteAttribute") != null)
                continue;

            // Ignore generic methods
            if (method.IsGeneric)
                continue;

			// This takes care of avoiding generic types which cause method.Type.CodeType to blow up
            if (method.Type.TypeKind != vsCMTypeRef.vsCMTypeRefCodeType || !(method.Type.CodeType is CodeClass2))
                continue;

			// We only support action methods that return an ActionResult and Task<ActionResult> derived types
            if (!method.Type.CodeType.get_IsDerivedFrom("System.Web.Mvc.ActionResult") && method.Type.CodeType.FullName !="System.Threading.Tasks.Task<System.Web.Mvc.ActionResult>")
            {
                Warning(String.Format("doesn't support {1}.{2} because it doesn't return a supported {3} type", codeClass.Name, method.Name, method.Type.CodeType.FullName));
                continue;
            }
			methods.Add(method);
        }
		return methods;
	}

	public CodeFunction2 GetMethod(CodeClass2 codeClass, string name, bool allowInherited = false)
	{
		return GetMethods(codeClass, allowInherited).FirstOrDefault(f => f.Name == name);
	}

    public string GetAttributeArgumentValue(CodeAttribute2 attribute, string argumentName)
    {
        if (attribute == null) return null;
        var patternFormat = @"{0}[^=]*=[\s]*([^$]+)";
        var match = Regex.Match(attribute.Value, String.Format(patternFormat, argumentName), RegexOptions.IgnoreCase);
        if (!match.Success) return null;
        return match.Groups[1].Value.TrimEnd();
    }

    public CodeAttribute2 GetAttribute(CodeElements attributes, string attributeType)
	{
		for (int i = 1; i <= attributes.Count; i++)
		{
			try
			{
				var attrib = (CodeAttribute2)attributes.Item(i);
				if (attributeType.Split(',').Contains(attrib.FullName, StringComparer.OrdinalIgnoreCase))
				{
					return attrib;
				}
			}
			catch
			{
				// FullName can throw in some cases, so just ignore those attributes
				continue;
			}
		}
		return null;
	}

	public string MakeClassName(string ns, string classname)
	{
		return String.IsNullOrEmpty(ns) ? classname :
			String.IsNullOrEmpty(classname) ? ns : ns + "." + classname;
	}

	public string GetVirtualPath(ProjectItem item)
	{
		string fileFullPath = item.get_FileNames(0);
		var appRoot = Path.GetDirectoryName(item.ContainingProject.FullName) + "\\";

		if (!fileFullPath.StartsWith(appRoot, StringComparison.OrdinalIgnoreCase))
			throw new Exception(string.Format("File {0} is not under app root {1}. Please report issue.", fileFullPath, appRoot));

		// Make a virtual path from the physical path
		return "~/" + fileFullPath.Substring(appRoot.Length).Replace('\\', '/');
	}

	public void ProcessTypes(ProjectItem file, Action<CodeClass2, ProjectItem> typeAction)
	{
		if(file.FileCodeModel != null)
		{
			// Process all the elements that are namespaces
			foreach (var ns in file.FileCodeModel.CodeElements.OfType<CodeNamespace>())
			{
				foreach (var type in ns.Members.OfType<CodeClass2>())
				{
					typeAction(type, file);
				}
			}
		}
	}

	public void ProcessFiles(IEnumerable<ProjectItem> folders, Action<ProjectItem, string> processAction)
	{
		foreach (ProjectItem item in folders)
		{
			if (IsFolder(item)) continue;
			processAction(item, item.Name);
		}
	}

	public void ProcessFiles(ProjectItem folder, Action<ProjectItem, string> processAction)
	{
		foreach (ProjectItem item in folder.ProjectItems)
		{
			if (IsFolder(item))
			{
				ProcessFiles(item, processAction);
			}
			else
				processAction(item, item.Name);
		}
	}

	public bool IsFolder(ProjectItem item)
	{
		return (item.Kind == Constants.vsProjectItemKindPhysicalFolder);
	}

	public bool IsNullable<T>(T obj)
	{
		if (obj == null) return true; // obvious
		return IsNullable(typeof(T));
	}

	public static bool IsNullable(Type type)
	{
		if (!type.IsValueType) return true; // ref-type
		if (Nullable.GetUnderlyingType(type) != null) return true; // Nullable<T>
		return false; // value-type
    }

}
#>


<#+
public class ClassTree
{
    public ClassTree(string fullName)
    {
        FullName = fullName;
        DepthLevel = !string.IsNullOrEmpty(FullName) ? FullName.Split('.').Count() : 0;
        SubClassTrees = new Dictionary<string, ClassTree>();
        AllSubClassTrees = new List<ClassTree>();
        Classes = new Dictionary<long, string>();
		Data = new Dictionary<long, Dictionary<string, string>>();
    }

    public string Name
    {
        get
        {
            return FullName == null ? null : FullName.Split('.').ToList().Last();
        }
    }

    public string Prefix
    {
        get
        {
            if (FullName == null) return null;
            var nsSlpit = FullName.Split('.').ToList();
            return String.Join(".", nsSlpit.Take(nsSlpit.Count - 1));
        }
    }

	public ClassTree Parent { get; private set; }

	public Dictionary<long, Dictionary<string, string>> Data { get; set; }

    public string FullName { get; set; }

    public int DepthLevel { get; private set; }

    public Dictionary<string, ClassTree> SubClassTrees { get; set; }

    public List<ClassTree> AllSubClassTrees { get; set; }

    public Dictionary<long, string> Classes { get; private set; }

    public string GetUniqueName()
    {
        return GetUniqueName(Name);
    }

    private string GetUniqueName(string name)
    {
        if (Parent == null) return Name;
        return Parent.GetUniqueName() + name;
    }

    public void AddClass(long id, string name, string nsName, Dictionary<string, string> data = null)
    {
        var ns = AddSubClass(nsName);               
        ns.Classes[id] = name;
		ns.Data[id] = data;
    }

    public ClassTree AddSubClass(string fullName)
    {
        ClassTree result = null;
        ClassTree child;
        if (String.IsNullOrEmpty(fullName)) return this;
        var nsSplit = fullName.Split('.').ToList();
        if (DepthLevel >= nsSplit.Count()) return null;
        var childName = nsSplit[DepthLevel];
        if (!SubClassTrees.ContainsKey(childName))
        {
            child = new ClassTree(String.Join(".", nsSplit.Take(DepthLevel + 1)));
            SubClassTrees.Add(childName, child);
            child.Parent = this;
            AllSubClassTrees.Add(child);
        }
        else
            child = SubClassTrees[childName];

        if ((DepthLevel + 1) < nsSplit.Count())
        {
            result = SubClassTrees[childName].AddSubClass(fullName);
            if (result != null)
                AllSubClassTrees.Add(result);
        }
        return (DepthLevel + 1) == nsSplit.Count() ? child : result;
    }
}
#>


<#+

public class DatabaseUnitOfWork : IDisposable
{
	private string _connectionString;
	private SqlConnection _sqlConnection;
	private SqlTransaction _transaction;

	public DatabaseUnitOfWork(string connectionString)
    {
		_connectionString = connectionString;
		_sqlConnection = new SqlConnection(connectionString);
		_sqlConnection.Open();
		_transaction = _sqlConnection.BeginTransaction();
    }

	public void OpenConnection()
    {
		_sqlConnection.Open();
		_transaction = _sqlConnection.BeginTransaction("UnitOfWork");
    }

	public void CloseConnection()
    {
		if(_sqlConnection.State != ConnectionState.Open) throw new Exception("conn not open!");
		_transaction.Commit();
		_sqlConnection.Close();
    }

	public SqlDataReader ExecuteReader(string queryString)
	{
		using(var command = new SqlCommand(queryString, _sqlConnection, _transaction))
        {
			var result = command.ExecuteReader();
			return result;
        }
	}

	public int ExecuteNonQuery(string queryString)
    {
		using(var command = new SqlCommand(queryString, _sqlConnection, _transaction))
        {
			return command.ExecuteNonQuery();
		}
	}

	public int ExecuteNonQuery(string queryString, params SqlParameter[] parameters)
    {
		using(var command = new SqlCommand(queryString, _sqlConnection, _transaction))
        {
			if(parameters != null)
				SetAsInputParameters(command, parameters);
			return command.ExecuteNonQuery();
		}
    }

	public TReturn ExecuteScalar<TReturn>(string queryString)
	{
		return ExecuteScalar<TReturn>(queryString, null);
	}

	public TReturn ExecuteScalar<TReturn>(string queryString, params SqlParameter[] parameters)
	{
		var returnType = typeof(TReturn);
		var convertTo = VisualStudioHelper.IsNullable(returnType)
			? Nullable.GetUnderlyingType(returnType)
			: returnType;
		using(var command = new SqlCommand(queryString, _sqlConnection, _transaction))
        {
			if(parameters != null)
				SetAsInputParameters(command, parameters);
			var result = command.ExecuteScalar();
			return result == null || result is DBNull
				? default(TReturn)
				: (TReturn) Convert.ChangeType(command.ExecuteScalar(), convertTo);
		}
    }

	private void SetAsInputParameters(SqlCommand command, SqlParameter[] parameters)
    {
		foreach(var parameter in parameters)
        {
			parameter.IsNullable = true;
			parameter.Direction = ParameterDirection.Input;
			if(parameter.Value == null)
				parameter.Value = DBNull.Value;
			command.Parameters.Add(parameter);
        }
    }

	public void Dispose()
    {
		CloseConnection();
		_sqlConnection.Dispose();
    }
}

#>


<#+
/*
    Manager.tt from Damien Guard: http://damieng.com/blog/2009/11/06/multiple-outputs-from-t4-made-easy-revisited
*/


// Manager class records the various blocks so it can split them up
class Manager {
    private class Block {
        public String Name;
        public int Start, Length;
    }

    private Block currentBlock;
    private List<Block> files = new List<Block>();
    private Block footer = new Block();
    private Block header = new Block();
    private ITextTemplatingEngineHost host;
    private StringBuilder template;
    protected List<String> generatedFileNames = new List<String>();

    public static Manager Create(ITextTemplatingEngineHost host, StringBuilder template) {
        return (host is IServiceProvider) ? new VSManager(host, template) : new Manager(host, template);
    }

    public void KeepGeneratedFile(String name) {
        name = Path.Combine(Path.GetDirectoryName(host.TemplateFile), name);
        generatedFileNames.Add(name);
    }
    
    public void StartNewFile(String name) {
        if (name == null)
            throw new ArgumentNullException("name");
        CurrentBlock = new Block { Name = name };
    }

    public void StartFooter() {
        CurrentBlock = footer;
    }

    public void StartHeader() {
        CurrentBlock = header;
    }

    public void EndBlock() {
        if (CurrentBlock == null)
            return;
        CurrentBlock.Length = template.Length - CurrentBlock.Start;
        if (CurrentBlock != header && CurrentBlock != footer)
            files.Add(CurrentBlock);
        currentBlock = null;
    }

    public virtual void Process(bool split) {
        if (split) {
            EndBlock();
            var headerText = template.ToString(header.Start, header.Length);
            var footerText = template.ToString(footer.Start, footer.Length);
            var outputPath = Path.GetDirectoryName(host.TemplateFile);
            files.Reverse();
            foreach (var block in files) {
                String fileName = Path.Combine(outputPath, block.Name);
				if(File.Exists(fileName))
					File.SetLastWriteTime(fileName, DateTime.Now);
                String content = headerText + template.ToString(block.Start, block.Length) + footerText;
                generatedFileNames.Add(fileName);
                CreateFile(fileName, content);
                template.Remove(block.Start, block.Length);
            }
        }
    }

    public string GetAllContent()
    {
        var headerText = template.ToString(header.Start, header.Length);
        var footerText = template.ToString(footer.Start, footer.Length);
        var bodyText = string.Join(Environment.NewLine, files.Select(b=> template.ToString(b.Start, b.Length)));
        return headerText + bodyText + footerText;
    }

    protected virtual void CreateFile(String fileName, String content) {
        if (IsFileContentDifferent(fileName, content))
            File.WriteAllText(fileName, content);
    }

    public virtual String GetCustomToolNamespace(String fileName) {
        return null;
    }

    public virtual String DefaultProjectNamespace {
        get { return null; }
    }

    protected bool IsFileContentDifferent(String fileName, String newContent) {
        return !(File.Exists(fileName) && File.ReadAllText(fileName) == newContent);
    }

    private Manager(ITextTemplatingEngineHost host, StringBuilder template) {
        this.host = host;
        this.template = template;
    }

    private Block CurrentBlock {
        get { return currentBlock; }
        set {
            if (CurrentBlock != null)
                EndBlock();
            if (value != null)
                value.Start = template.Length;
            currentBlock = value;
        }
    }

    private class VSManager : Manager {
        private EnvDTE.ProjectItem templateProjectItem;
        private EnvDTE.DTE dte;
        private Action<String> checkOutAction;
        private Action<IEnumerable<String>> projectSyncAction;

        public override String DefaultProjectNamespace {
            get {
                return templateProjectItem.ContainingProject.Properties.Item("DefaultNamespace").Value.ToString();
            }
        }

        public override String GetCustomToolNamespace(string fileName) {
            return dte.Solution.FindProjectItem(fileName).Properties.Item("CustomToolNamespace").Value.ToString();
        }

        public override void Process(bool split) {
            if (templateProjectItem.ProjectItems == null)
                return;
            base.Process(split);
            projectSyncAction.EndInvoke(projectSyncAction.BeginInvoke(generatedFileNames, null, null));
        }

        protected override void CreateFile(String fileName, String content) {
            if (IsFileContentDifferent(fileName, content)) {
                CheckoutFileIfRequired(fileName);
                File.WriteAllText(fileName, content);
            }
        }

        internal VSManager(ITextTemplatingEngineHost host, StringBuilder template)
            : base(host, template) {
            var hostServiceProvider = (IServiceProvider)host;
            if (hostServiceProvider == null)
                throw new ArgumentNullException("Could not obtain IServiceProvider");
            dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
            if (dte == null)
                throw new ArgumentNullException("Could not obtain DTE from host");
            templateProjectItem = dte.Solution.FindProjectItem(host.TemplateFile);
            checkOutAction = (String fileName) => dte.SourceControl.CheckOutItem(fileName);
            projectSyncAction = (IEnumerable<String> keepFileNames) => ProjectSync(templateProjectItem, keepFileNames);
        }

        private static void ProjectSync(EnvDTE.ProjectItem templateProjectItem, IEnumerable<String> keepFileNames) {
            var keepFileNameSet = new HashSet<String>(keepFileNames);
            var projectFiles = new Dictionary<String, EnvDTE.ProjectItem>();
            var originalFilePrefix = Path.GetFileNameWithoutExtension(templateProjectItem.get_FileNames(0)) + ".";
            foreach (EnvDTE.ProjectItem projectItem in templateProjectItem.ProjectItems)
                projectFiles.Add(projectItem.get_FileNames(0), projectItem);

            // Remove unused items from the project
            foreach (var pair in projectFiles)
                if (!keepFileNames.Contains(pair.Key) && !(Path.GetFileNameWithoutExtension(pair.Key) + ".").StartsWith(originalFilePrefix))
                    pair.Value.Delete();

            // Add missing files to the project
            foreach (String fileName in keepFileNameSet)
                if (!projectFiles.ContainsKey(fileName))
                    templateProjectItem.ProjectItems.AddFromFile(fileName);
        }

        private void CheckoutFileIfRequired(String fileName) {
            var sc = dte.SourceControl;
            if (sc != null && sc.IsItemUnderSCC(fileName) && !sc.IsItemCheckedOut(fileName))
                checkOutAction.EndInvoke(checkOutAction.BeginInvoke(fileName, null, null));
        }
    }
}

/*
    End of Manager.tt
*/
#>


<#+
/// <summary>
/// Object that provides functionality for automating Visual Studio.
/// </summary>
//public AutomationHelper VisualStudioHelper;

/// <summary>
/// This class provides functionality for automating Visual Studio.
/// </summary>
public class AutomationHelper 
{
	/// <summary>
	/// Creates a new instance of this class
	/// </summary>
	public AutomationHelper(object host)
	{
		// store a reference to the template host
		// we will need this frequently
		this.Host = host as ITextTemplatingEngineHost;
	}
	
	private EnvDTE.DTE _DTE = null;
	/// <summary>
	/// Returns a reference to the primary management object of Visual Studio
	/// <summary>
	public EnvDTE.DTE DTE
	{
		get
		{
			if (_DTE == null)
            {
				var hostServiceProvider = this.Host as IServiceProvider;
				if (hostServiceProvider != null)
					_DTE = hostServiceProvider.GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
            }
			return _DTE;
		}
	}
	
	/// <summary>
	/// Stores a reference to the Host of the t4 template
	/// </summary>
	public ITextTemplatingEngineHost Host { get; private set; }


	#region Solution and Projects
	/// <summary>
	/// Gets the full path of the solution file
	/// </summary>
	public string SolutionFile
    {
		get
        {
			return this.DTE.Solution.FileName;
        }
    }
	/// <summary>
	/// Gets the file name of the currently opened solution.
	/// </summary>
	public string SolutionFileName
    {
		get
        {
			return System.IO.Path.GetFileName(this.DTE.Solution.FileName);
        }
    }
	/// <summary>
	/// Gets the name of the currently opened solution
	/// </summary>
	public string SolutionName
    {
		get
        {
			return this.DTE.Solution.Properties.Item("Name").Value.ToString();
        }
    }

	/// <summary>
	/// Gets a list of all Projects within the solution
	/// </summary>
	public IEnumerable<EnvDTE.Project> GetAllProjects()
    {
		var ret = new List<EnvDTE.Project>();

		// take all projects that are at top level of the solution
		// and recursively search Project folders
		var topLevelProjects = this.DTE.Solution.Projects;

		foreach(EnvDTE.Project project in topLevelProjects)
        {
			if (project.Kind == vsProjectType.SolutionFolder)
				ret.AddRange(GetProjectsFromItemsCollection(project.ProjectItems));
			else
				ret.Add(project);
        }

		return ret;
    }
	/// <summary>
	/// Gets the project object within the current solution by a given project name.
	/// </summary>
	public EnvDTE.Project GetProject(string projectName)
    {
		return this.GetAllProjects()
				   .Where(p => p.Name == projectName)
				   .First();
    }
	/// <summary>
	/// Gets the project containing the .tt-File
	/// </summary>
	public EnvDTE.Project CurrentProject
    {
		get
        {
			return this.FindProjectItem(this.Host.TemplateFile).ContainingProject;
        }
    }
	#endregion

	#region Project Items
	public EnvDTE.ProjectItem FindProjectItem(string fileName)
    {
		return this.DTE.Solution.FindProjectItem(fileName);
    }
	/// <summary>
	/// Gets all project items from the current solution
	/// </summary>
	public IEnumerable<EnvDTE.ProjectItem>GetAllSolutionItems()
    {
		var ret = new List<EnvDTE.ProjectItem>();

		// iterate all projects and add their items
		foreach(EnvDTE.Project project in this.GetAllProjects())
			ret.AddRange(GetAllProjectItems(project));

		return ret;
    }
	/// <summary>
	/// Gets all project items from the current project
	/// </summary>
	public IEnumerable<EnvDTE.ProjectItem>GetAllProjectItems()
    {
		// get the project of the template file and reeturn all its items
		var project = this.CurrentProject;
		return GetAllProjectItems(project);
    }
	/// <summary>
	/// Gets all Project items from a given project. 
	/// </summary>
	public IEnumerable<EnvDTE.ProjectItem>GetAllProjectItems(EnvDTE.Project project)
    {
		return this.GetProjectItemsRecursively(project.ProjectItems);
    }
	#endregion

	#region Code Model
	/// <summary>
    /// Searches a given collection of CodeElements recursively for objects of the given elementType.
    /// </summary>
    /// <param name="elements">Collection of CodeElements to recursively search for matching objects in.</param>
    /// <param name="elementType">Objects of this CodeModelElement-Type will be returned.</param>
    /// <param name="includeExternalTypes">If set to true objects that are not part of this solution are retrieved, too. E.g. the INotifyPropertyChanged interface from the System.ComponentModel namespace.</param>
    /// <returns>A list of CodeElement objects matching the desired elementType.</returns>
    public List<EnvDTE.CodeElement> GetAllCodeElementsOfType(EnvDTE.CodeElements elements, EnvDTE.vsCMElement elementType, bool includeExternalTypes)
    {
        var ret = new List<EnvDTE.CodeElement>();

        foreach (EnvDTE.CodeElement elem in elements)
        {
            // iterate all namespaces (even if they are external)
            // > they might contain project code
            if (elem.Kind == EnvDTE.vsCMElement.vsCMElementNamespace)
            {
                ret.AddRange(GetAllCodeElementsOfType(((EnvDTE.CodeNamespace)elem).Members, elementType, includeExternalTypes));
            }
            // if its not a namespace but external
            // > ignore it
            else if (elem.InfoLocation == EnvDTE.vsCMInfoLocation.vsCMInfoLocationExternal
                    && !includeExternalTypes)
                continue;
            // if its from the project
            // > check its members
            else if (elem.IsCodeType)
            {
                ret.AddRange(GetAllCodeElementsOfType(((EnvDTE.CodeType)elem).Members, elementType, includeExternalTypes));
            }

            // if this item is of the desired type
            // > store it
            if (elem.Kind == elementType)
                ret.Add(elem);
        }

        return ret;
    }
	#endregion


	#region Auxiliary stuff
	private List<EnvDTE.Project> GetProjectsFromItemsCollection(EnvDTE.ProjectItems items)
    {
		var ret = new List<EnvDTE.Project>();

		foreach(EnvDTE.ProjectItem item in items)
        {
			if (item.SubProject == null)
				continue;
			else if (item.SubProject.Kind == vsProjectType.SolutionFolder)
				ret.AddRange(GetProjectsFromItemsCollection(item.SubProject.ProjectItems));
			else if (item.SubProject.Kind == vsProjectType.VisualBasic
				  || item.SubProject.Kind == vsProjectType.VisualCPlusPlus
				  || item.SubProject.Kind == vsProjectType.VisualCSharp
				  || item.SubProject.Kind == vsProjectType.VisualJSharp
				  || item.SubProject.Kind == vsProjectType.WebProject)
				ret.Add(item.SubProject);
        }

		return ret;
    }
	private List<EnvDTE.ProjectItem> GetProjectItemsRecursively(EnvDTE.ProjectItems items)
    {
		var ret = new List<EnvDTE.ProjectItem>();
        if (items == null) return ret;
		
		foreach(EnvDTE.ProjectItem item in items)
        {
			ret.Add(item);
			ret.AddRange(GetProjectItemsRecursively(item.ProjectItems));
        }

		return ret;
    }
	#endregion

	/// <summary>
	/// Gets the T4 template as vs projectitem.
	/// </summary>
	public EnvDTE.ProjectItem GetTemplateAsProjectItem()
	{
		return DTE.Solution.FindProjectItem(this.Host.TemplateFile);
	}
		
}

public class vsProjectType
{
	public const string SolutionFolder = "{66A26720-8FB5-11D2-AA7E-00C04F688DDE}";
	public const string VisualBasic = "{F184B08F-C81C-45F6-A57F-5ABD9991F28F}";
	public const string VisualCSharp = "{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}";
	public const string VisualCPlusPlus = "{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}";
	public const string VisualJSharp = "{E6FDF86B-F3D1-11D4-8576-0002A516ECE8}";
	public const string WebProject = "{E24C65DC-7377-472b-9ABA-BC803B73C61A}";
    public const string VisualBasicCodeModelLanguage = "{B5E9BD33-6D3E-4B5D-925E-8A43B79820B4}";
}


private class ConcreteCodeElements : MarshalByRefObject, CodeElements
{
    private readonly CodeType _primaryCodeType;
    private readonly IList<CodeElement> _codeElements;

    public ConcreteCodeElements(CodeType primaryCodeType, IEnumerable<CodeElement> codeElements)
    {
        _primaryCodeType = primaryCodeType;
        _codeElements = codeElements.ToList();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return _codeElements.GetEnumerator();
    }

    public CodeElement Item(object index)
    {
        if (index is int)
        {
            return _codeElements[(int)index];
        }
        throw new ArgumentException();
    }

    public void Reserved1(object element)
    {
        throw new NotImplementedException();
    }

    public bool CreateUniqueID(string prefix, ref string newName)
    {
        throw new NotImplementedException();
    }

    public DTE DTE
    {
        get { return _primaryCodeType.DTE; }
    }

    public object Parent
    {
        get { return _primaryCodeType; }
    }

    public int Count
    {
        get { return _codeElements.Count; }
    }

    IEnumerator CodeElements.GetEnumerator()
    {
        return _codeElements.GetEnumerator();
    }
}
#>
